{
  "fgp_fastapi_api_basic": {
    "prefix": "fgp_fastapi_api_basic",
    "body": [
      "from fastapi import FastAPI",
      "from pydantic import BaseModel",
      "from typing import List, Optional",
      "",
      "app = FastAPI()",
      "",
      "class Item(BaseModel):",
      "    id: int",
      "    name: str",
      "    description: Optional[str] = None",
      "",
      "items_db: List[Item] = []",
      "",
      "@app.get(\"/\")",
      "def read_root():",
      "    return {\"message\": \"Welcome to FastAPI\"}",
      "",
      "@app.get(\"/items\", response_model=List[Item])",
      "def get_items():",
      "    return items_db",
      "",
      "@app.get(\"/items/{item_id}\", response_model=Item)",
      "def get_item(item_id: int):",
      "    for item in items_db:",
      "        if item.id == item_id:",
      "            return item",
      "    return {\"error\": \"Item not found\"}",
      "",
      "@app.post(\"/items\", response_model=Item)",
      "def create_item(item: Item):",
      "    items_db.append(item)",
      "    return item",
      "",
      "@app.put(\"/items/{item_id}\", response_model=Item)",
      "def update_item(item_id: int, updated_item: Item):",
      "    for index, item in enumerate(items_db):",
      "        if item.id == item_id:",
      "            items_db[index] = updated_item",
      "            return updated_item",
      "    return {\"error\": \"Item not found\"}",
      "",
      "@app.delete(\"/items/{item_id}\")",
      "def delete_item(item_id: int):",
      "    global items_db",
      "    items_db = [item for item in items_db if item.id != item_id]",
      "    return {\"message\": \"Item deleted\"}"
    ],
    "description": "fgp_fastapi_api_basic snippet"
  },
  "fgp_flask_basic": {
    "prefix": "fgp_flask_basic",
    "body": [
      "from flask import Flask, jsonify, request",
      "",
      "app = Flask(__name__)",
      "",
      "@app.route(\"/\")",
      "def index():",
      "    return jsonify({\"message\": \"Hello World\"})",
      "",
      "if __name__ == '__main__':",
      "    app.run(debug=True)"
    ],
    "description": "fgp_flask_basic snippet"
  },
  "fgp_flask_todo": {
    "prefix": "fgp_flask_todo",
    "body": [
      "from flask import Flask, jsonify, request",
      "",
      "app = Flask(__name__)",
      "",
      "# In-memory database to store todos",
      "todos = [",
      "    {\"id\": 1, \"todo\": \"Buy groceries\", \"done\": True},",
      "    {\"id\": 2, \"todo\": \"Walk the dog\", \"done\": False},",
      "]",
      "",
      "# Route for the index page",
      "@app.route('/')",
      "def index():",
      "    return app.send_static_file('index.html')",
      "",
      "# Get all todos",
      "@app.route('/api/todo', methods=['GET'])",
      "def get_all_todos():",
      "    return jsonify(todos)",
      "",
      "# Get a specific todo by ID",
      "@app.route('/api/todo/<int:id>', methods=['GET'])",
      "def get_todo_by_id(id):",
      "    todo = next((todo for todo in todos if todo[\"id\"] == id), None)",
      "    if todo:",
      "        return jsonify(todo)",
      "    return jsonify({\"error\": \"Todo not found\"}), 404",
      "",
      "# Add a new todo",
      "@app.route('/api/todo/create', methods=['POST'])",
      "def add_todo():",
      "    data = request.get_json()",
      "    new_todo = {",
      "        \"id\": len(todos) + 1,  # Simple ID generation",
      "        \"todo\": data['todo'],",
      "        \"done\": data.get('done', False)",
      "    }",
      "    todos.append(new_todo)",
      "    return jsonify(new_todo), 201",
      "",
      "# Update a specific todo by ID",
      "@app.route('/api/todo/update/<int:id>', methods=['PUT'])",
      "def update_todo(id):",
      "    data = request.get_json()",
      "    todo = next((todo for todo in todos if todo[\"id\"] == id), None)",
      "    if todo:",
      "        todo['todo'] = data['todo']",
      "        todo['done'] = data['done']",
      "        return jsonify(todo)",
      "    return jsonify({\"error\": \"Todo not found\"}), 404",
      "",
      "# Delete a todo by ID",
      "@app.route('/api/todo/delete/<int:id>', methods=['DELETE'])",
      "def delete_todo(id):",
      "    global todos",
      "    todos = [todo for todo in todos if todo[\"id\"] != id]",
      "    return jsonify({\"message\": \"Todo deleted\"}), 200",
      "",
      "if __name__ == '__main__':",
      "    app.run(debug=True)"
    ],
    "description": "fgp_flask_todo snippet"
  },
  "fgp_hello": {
    "prefix": "fgp_hello",
    "body": [
      "print(\"Hello, World!\")",
      "",
      "",
      "# python --version",
      "# python hello.py",
      "# Hello, World!",
      "",
      "# python -m venv venv",
      "# source venv/Scripts/activate",
      "# deactivate",
      "",
      "# Dentro del int√©rprete interactivo de Python (la consola de Python).",
      "# exit()"
    ],
    "description": "fgp_hello snippet"
  }
}