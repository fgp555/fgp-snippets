{
  "fgp_arrowFunction": {
    "prefix": "fgp_arrowFunction",
    "body": [
      "const $1 = () => {",
      "  console.log(\"test $1\");",
      "};"
    ],
    "description": "fgp_arrowFunction snippet"
  },
  "fgp_axios_api": {
    "prefix": "fgp_axios_api",
    "body": [
      "import axios from 'axios';",
      "",
      "const API = axios.create({",
      "  baseURL: '${1:http://localhost:3000/api}',",
      "  headers: {",
      "    'Content-Type': 'application/json',",
      "    // 'Authorization': `Bearer ${2:your_token}`",
      "  }",
      "});",
      "",
      "export async function fetchData(endpoint = '/example') {",
      "  try {",
      "    const response = await API.get(endpoint);",
      "    console.log('✅ Data:', response.data);",
      "    return response.data;",
      "  } catch (error) {",
      "    console.error('❌ Error fetching data:', error);",
      "    throw error;",
      "  }",
      "}"
    ],
    "description": "fgp_axios_api snippet"
  },
  "fgp_class": {
    "prefix": "fgp_class",
    "body": [
      "class ${1:MyClass} {",
      "    constructor(${2:prop}) {",
      "      this.${2:prop} = ${2:prop};",
      "    }",
      "  ",
      "    ${3:myMethod}() {",
      "      console.log('Method ${3:myMethod} called with', this.${2:prop});",
      "    }",
      "  }",
      "  ",
      "  // Uso de ejemplo",
      "  const instance = new ${1:MyClass}('${4:example}');",
      "  instance.${3:myMethod}();"
    ],
    "description": "fgp_class snippet"
  },
  "fgp_config_sequelize": {
    "prefix": "fgp_config_sequelize",
    "body": [
      "const { Sequelize } = require(\"sequelize\");",
      "",
      "const DB_NAME = process.env.DB_NAME || \"my_db\";",
      "const DB_USER = process.env.DB_USER || \"root\";",
      "const DB_PASS = process.env.DB_PASS || \"\";",
      "const DB_HOST = process.env.DB_HOST || \"localhost\";",
      "",
      "const sequelize = new Sequelize(DB_NAME, DB_USER, DB_PASS, {",
      "  host: DB_HOST,",
      "  dialect: \"mysql\",",
      "  logging: false,",
      "});",
      "",
      "module.exports = sequelize;"
    ],
    "description": "fgp_config_sequelize snippet"
  },
  "fgp_date": {
    "prefix": "fgp_date",
    "body": [
      "new Date().toISOString().replace(/[:.\\-TZ]/g, '').slice(2, -3)"
    ],
    "description": "fgp_date snippet"
  },
  "fgp_entity_controller": {
    "prefix": "fgp_entity_controller",
    "body": [
      "class $1Controller {",
      "  getAll(req, res) {",
      "    res.json({ message: \"Get all $1\" });",
      "  }",
      "",
      "  getById(req, res) {",
      "    const { id } = req.params;",
      "    res.json({ message: \"Get $1 by id\", id });",
      "  }",
      "",
      "  create(req, res) {",
      "    const data = req.body;",
      "    res.status(201).json({ message: \"Created $1\", data });",
      "  }",
      "",
      "  update(req, res) {",
      "    const { id } = req.params;",
      "    const data = req.body;",
      "    res.json({ message: \"Updated $1\", id, data });",
      "  }",
      "",
      "  remove(req, res) {",
      "    const { id } = req.params;",
      "    res.json({ message: \"Deleted $1\", id });",
      "  }",
      "}",
      "",
      "module.exports = new $1Controller();"
    ],
    "description": "fgp_entity_controller snippet"
  },
  "fgp_entity_routes": {
    "prefix": "fgp_entity_routes",
    "body": [
      "const express = require('express');",
      "const router = express.Router();",
      "const $1Controller = require('../controllers/$1Controller');",
      "",
      "router.get('/', $1Controller.getAll);",
      "router.get('/:id', $1Controller.getById);",
      "router.post('/', $1Controller.create);",
      "router.put('/:id', $1Controller.update);",
      "router.delete('/:id', $1Controller.remove);",
      "",
      "module.exports = router;"
    ],
    "description": "fgp_entity_routes snippet"
  },
  "fgp_entity_service": {
    "prefix": "fgp_entity_service",
    "body": [
      "class $1Service {",
      "  findAll() {",
      "    return [",
      "      { id: 1, name: \"$1 A\" },",
      "      { id: 2, name: \"$1 B\" },",
      "    ];",
      "  }",
      "",
      "  findById(id) {",
      "    return { id, name: `$1 ${id}` };",
      "  }",
      "",
      "  create(data) {",
      "    return { id: Date.now(), ...data };",
      "  }",
      "",
      "  update(id, data) {",
      "    return { id, ...data };",
      "  }",
      "",
      "  remove(id) {",
      "    return { deleted: true, id };",
      "  }",
      "}",
      "",
      "module.exports = new $1Service();"
    ],
    "description": "fgp_entity_service snippet"
  },
  "fgp_entity_service_sequelize": {
    "prefix": "fgp_entity_service_sequelize",
    "body": [
      "const { $1 } = require(\"../models\");",
      "",
      "class $1Service {",
      "  async findAll() {",
      "    return await $1.findAll();",
      "  }",
      "",
      "  async findById(id) {",
      "    return await $1.findByPk(id);",
      "  }",
      "",
      "  async create(data) {",
      "    return await $1.create(data);",
      "  }",
      "",
      "  async update(id, data) {",
      "    const record = await $1.findByPk(id);",
      "    return record ? await record.update(data) : null;",
      "  }",
      "",
      "  async remove(id) {",
      "    const record = await $1.findByPk(id);",
      "    return record ? await record.destroy() : null;",
      "  }",
      "}",
      "",
      "module.exports = new $1Service();"
    ],
    "description": "fgp_entity_service_sequelize snippet"
  },
  "fgp_express": {
    "prefix": "fgp_express",
    "body": [
      "const express = require(\"express\");",
      "",
      "const app = express();",
      "const PORT = process.env.PORT ?? 3000;",
      "",
      "app.use(express.static(\"public\"));",
      "",
      "app.get(\"/\", (req, res) => {",
      "  console.log(req.headers);",
      "  res.send(\"Hello, World!\");",
      "});",
      "",
      "app.listen(PORT, () => {",
      "  console.log(`Server listening on http://localhost:${PORT}`);",
      "});"
    ],
    "description": "fgp_express snippet"
  },
  "fgp_expressINFO": {
    "prefix": "fgp_expressINFO",
    "body": [
      "const express = require(\"express\");",
      "const app = express();",
      "const port = 3000;",
      "",
      "app.get(\"/\", (req, res) => {",
      "  // Get the versions of Node.js and npm",
      "  const nodeVersion = process.version;",
      "  const npmVersion = require(\"child_process\").execSync(\"npm -v\").toString().trim();",
      "  const expressVersion = require(\"express/package\").version;",
      "  const environment = process.env.NODE_ENV || \"development\";",
      "  const osInfo = require(\"os\").platform(); // Operating system information",
      "",
      "  // Create a response object",
      "  const response = {",
      "    node: nodeVersion,",
      "    npm: npmVersion,",
      "    express: expressVersion,",
      "    environment: environment,",
      "    os: osInfo,",
      "    // Add more information as needed",
      "  };",
      "",
      "  // Send the response as JSON",
      "  res.json(response);",
      "});",
      "",
      "app.listen(port, () => {",
      "  console.log(`Server listening at http://localhost:port`);",
      "});"
    ],
    "description": "fgp_expressINFO snippet"
  },
  "fgp_fetch_api": {
    "prefix": "fgp_fetch_api",
    "body": [
      "fetch('${1:https://api.example.com/data}', {",
      "    method: '${2:GET}', // GET, POST, PUT, DELETE",
      "    headers: {",
      "      'Content-Type': 'application/json',",
      "      // 'Authorization': 'Bearer YOUR_TOKEN'",
      "    },",
      "    ${3:// body: JSON.stringify({ key: 'value' })}",
      "  })",
      "    .then(response => {",
      "      if (!response.ok) throw new Error('Network response was not ok');",
      "      return response.json();",
      "    })",
      "    .then(data => {",
      "      console.log('✅ Success:', data);",
      "    })",
      "    .catch(error => {",
      "      console.error('❌ Error:', error);",
      "    });"
    ],
    "description": "fgp_fetch_api snippet"
  },
  "fgp_graphql_client": {
    "prefix": "fgp_graphql_client",
    "body": [
      "const GRAPHQL_ENDPOINT = \"${1:http://localhost:4000/graphql}\";",
      "",
      "export async function fetchGraphQL(query, variables = {}) {",
      "  try {",
      "    const response = await fetch(GRAPHQL_ENDPOINT, {",
      "      method: \"POST\",",
      "      headers: {",
      "        \"Content-Type\": \"application/json\",",
      "        // 'Authorization': `Bearer ${2:your_token}`",
      "      },",
      "      body: JSON.stringify({",
      "        query,",
      "        variables,",
      "      }),",
      "    });",
      "",
      "    const result = await response.json();",
      "",
      "    if (result.errors) {",
      "      console.error(\"❌ GraphQL errors:\", result.errors);",
      "      throw new Error(\"GraphQL query failed\");",
      "    }",
      "",
      "    console.log(\"✅ GraphQL data:\", result.data);",
      "    return result.data;",
      "  } catch (error) {",
      "    console.error(\"❌ Fetch error:\", error);",
      "    throw error;",
      "  }",
      "}",
      "",
      "// Ejemplo de uso:",
      "// const query = `",
      "//   query GetUser($id: ID!) {",
      "//     user(id: $id) {",
      "//       id",
      "//       name",
      "//       email",
      "//     }",
      "//   }",
      "// `;",
      "",
      "// fetchGraphQL(query, { id: \"1\" }).then(data => console.log(data));"
    ],
    "description": "fgp_graphql_client snippet"
  },
  "fgp_graphql_server": {
    "prefix": "fgp_graphql_server",
    "body": [
      "// npm install express apollo-server-express graphql",
      "",
      "const { ApolloServer, gql } = require(\"apollo-server-express\");",
      "const express = require(\"express\");",
      "",
      "// Definición del esquema",
      "const typeDefs = gql`",
      "  type Todo {",
      "    id: ID!",
      "    text: String!",
      "    completed: Boolean!",
      "  }",
      "",
      "  type Query {",
      "    todos: [Todo!]!",
      "  }",
      "",
      "  type Mutation {",
      "    addTodo(text: String!): Todo!",
      "  }",
      "`;",
      "",
      "// Datos en memoria",
      "let todos = [",
      "  { id: \"1\", text: \"Aprender GraphQL\", completed: false },",
      "  { id: \"2\", text: \"Construir una API\", completed: true },",
      "];",
      "",
      "// Resolvers",
      "const resolvers = {",
      "  Query: {",
      "    todos: () => todos,",
      "  },",
      "  Mutation: {",
      "    addTodo: (_, { text }) => {",
      "      const newTodo = {",
      "        id: String(todos.length + 1),",
      "        text,",
      "        completed: false,",
      "      };",
      "      todos.push(newTodo);",
      "      return newTodo;",
      "    },",
      "  },",
      "};",
      "",
      "// Inicialización del servidor",
      "async function startServer() {",
      "  const app = express();",
      "  const server = new ApolloServer({ typeDefs, resolvers });",
      "",
      "  await server.start();",
      "  server.applyMiddleware({ app });",
      "",
      "  app.listen({ port: 4000 }, () => console.log(`🚀 Servidor listo en http://localhost:4000${server.graphqlPath}`));",
      "}",
      "",
      "startServer();"
    ],
    "description": "fgp_graphql_server snippet"
  },
  "fgp_local_storage": {
    "prefix": "fgp_local_storage",
    "body": [
      "// Guardar en localStorage",
      "localStorage.setItem(\"user\", JSON.stringify({ name: \"Frank\", age: 30 }));",
      "",
      "// Leer desde localStorage",
      "const user = JSON.parse(localStorage.getItem(\"user\"));",
      "console.log(\"User:\", user);",
      "",
      "// Eliminar una clave",
      "localStorage.removeItem(\"user\");",
      "",
      "// Limpiar todo el localStorage",
      "localStorage.clear();"
    ],
    "description": "fgp_local_storage snippet"
  },
  "fgp_react_todolist": {
    "prefix": "fgp_react_todolist",
    "body": [
      "import React, { useState, useEffect } from \"react\";",
      "import TaskList from \"./TaskList\";",
      "",
      "const TodoApp = () => {",
      "  const [tasks, setTasks] = useState([]);",
      "  const [newTask, setNewTask] = useState(\"\");",
      "",
      "  // Cargar las tareas desde localStorage al inicio",
      "  useEffect(() => {",
      "    const savedTasks = JSON.parse(localStorage.getItem(\"tasks\")) || [];",
      "    setTasks(savedTasks);",
      "  }, []);",
      "",
      "  // Guardar las tareas en localStorage cada vez que cambian",
      "  useEffect(() => {",
      "    localStorage.setItem(\"tasks\", JSON.stringify(tasks));",
      "  }, [tasks]);",
      "",
      "  // Añadir nueva tarea",
      "  const addTask = () => {",
      "    if (newTask.trim()) {",
      "      const task = { id: Date.now(), text: newTask, completed: false };",
      "      setTasks([...tasks, task]);",
      "      setNewTask(\"\");",
      "    }",
      "  };",
      "",
      "  // Filtrar tareas completadas o pendientes",
      "  const filterTasks = (status) => {",
      "    return tasks.filter((task) => (status === \"completed\" ? task.completed : !task.completed));",
      "  };",
      "",
      "  return (",
      "    <div className=\"todo-app\">",
      "      <h1>Lista de Tareas</h1>",
      "      <input type=\"text\" value={newTask} onChange={(e) => setNewTask(e.target.value)} placeholder=\"Añadir tarea...\" />",
      "      <button onClick={addTask}>Añadir Tarea</button>",
      "",
      "      <div>",
      "        <button onClick={() => setTasks(filterTasks(\"completed\"))}>Mostrar Completadas</button>",
      "        <button onClick={() => setTasks(filterTasks(\"pending\"))}>Mostrar Pendientes</button>",
      "      </div>",
      "",
      "      <TaskList tasks={tasks} setTasks={setTasks} />",
      "    </div>",
      "  );",
      "};",
      "",
      "export default TodoApp;"
    ],
    "description": "fgp_react_todolist snippet"
  },
  "fgp_serverVanilla": {
    "prefix": "fgp_serverVanilla",
    "body": [
      "const http = require(\"http\");",
      "",
      "const server = http.createServer((req, res) => {",
      "  res.writeHead(200, { \"Content-Type\": \"text/plain\" });",
      "  res.end(\"Hello, World!\\n\");",
      "});",
      "",
      "const PORT = 3000;",
      "const IP_ADDRESS = \"127.0.0.1\";",
      "",
      "server.listen(PORT, IP_ADDRESS, () => {",
      "  console.log(`Server running at http://${IP_ADDRESS}:${PORT}/`);",
      "});"
    ],
    "description": "fgp_serverVanilla snippet"
  },
  "fgp_shortener": {
    "prefix": "fgp_shortener",
    "body": [
      "const express = require(\"express\");",
      "const app = express();",
      "",
      "const data = [",
      "  {",
      "    url: \"google\",",
      "    redirect: \"https://google.com/\",",
      "    visits: 0,",
      "  },",
      "  {",
      "    url: \"example\",",
      "    redirect: \"https://example.com/\",",
      "    visits: 0,",
      "  },",
      "];",
      "",
      "app.get(\"/\", (req, res) => {",
      "  res.json(data);",
      "});",
      "",
      "app.get(\"/:url\", (req, res) => {",
      "  const requestedUrl = req.params.url;",
      "  const redirectEntry = data.find((entry) => entry.url === requestedUrl);",
      "",
      "  if (redirectEntry) {",
      "    redirectEntry.visits++;",
      "    res.redirect(redirectEntry.redirect);",
      "  } else {",
      "    res.status(404).json(data);",
      "  }",
      "});",
      "",
      "app.listen(3000, () => {",
      "  console.log(`Server is running http://localhost:3000/`);",
      "});"
    ],
    "description": "fgp_shortener snippet"
  },
  "fgp_socket_io_client": {
    "prefix": "fgp_socket_io_client",
    "body": [
      "// fgp_socket_io_client.js",
      "import { io } from \"socket.io-client\";",
      "",
      "const socket = io(\"http://localhost:3000\");",
      "",
      "// Conexión establecida",
      "socket.on(\"connect\", () => {",
      "  console.log(\"🟢 Conectado al servidor con ID:\", socket.id);",
      "});",
      "",
      "// Enviar mensaje al servidor",
      "function sendMessage(msg) {",
      "  socket.emit(\"message\", msg);",
      "}",
      "",
      "// Escuchar mensajes del servidor",
      "socket.on(\"message\", (msg) => {",
      "  console.log(\"💬 Mensaje recibido:\", msg);",
      "});",
      "",
      "// Desconexión",
      "socket.on(\"disconnect\", () => {",
      "  console.log(\"🔴 Desconectado del servidor\");",
      "});"
    ],
    "description": "fgp_socket_io_client snippet"
  },
  "fgp_socket_io_server": {
    "prefix": "fgp_socket_io_server",
    "body": [
      "const express = require(\"express\");",
      "const http = require(\"http\");",
      "const { Server } = require(\"socket.io\");",
      "",
      "const app = express();",
      "const server = http.createServer(app);",
      "const io = new Server(server, {",
      "  cors: {",
      "    origin: \"*\",",
      "  },",
      "});",
      "",
      "io.on(\"connection\", (socket) => {",
      "  console.log(\"🟢 Usuario conectado:\", socket.id);",
      "",
      "  socket.on(\"message\", (msg) => {",
      "    console.log(\"📨 Mensaje recibido:\", msg);",
      "    io.emit(\"message\", msg); // broadcast",
      "  });",
      "",
      "  socket.on(\"disconnect\", () => {",
      "    console.log(\"🔴 Usuario desconectado:\", socket.id);",
      "  });",
      "});",
      "",
      "server.listen(3000, () => {",
      "  console.log(\"🚀 Servidor Socket.IO en http://localhost:3000\");",
      "});"
    ],
    "description": "fgp_socket_io_server snippet"
  },
  "fgp_webComponent": {
    "prefix": "fgp_webComponent",
    "body": [
      "let html = `<p>web component</p>`;",
      "let css = `<style>:host{color: tomato;}</style>`;",
      "",
      "class WebComponent extends HTMLElement {",
      "  constructor() {",
      "    super();",
      "    const shadow = this.attachShadow({ mode: \"open\" });",
      "    shadow.innerHTML = html + css;",
      "  }",
      "}",
      "customElements.define(\"web-component\", WebComponent);"
    ],
    "description": "fgp_webComponent snippet"
  }
}