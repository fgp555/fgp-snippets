{
  "fgp_component": {
    "prefix": "fgp_component",
    "body": [
      "import \"./${TM_FILENAME_BASE}.css\";",
      "",
      "const ${1:${TM_FILENAME_BASE}} = () => {",
      "  return (",
      "    <div>",
      "        <h2>${1:${TM_FILENAME_BASE}}</h2>           ",
      "    </div>",
      "  );",
      "};",
      "",
      "export default ${1:${TM_FILENAME_BASE}};"
    ],
    "description": "fgp_component snippet"
  },
  "fgp_component_props": {
    "prefix": "fgp_component_props",
    "body": [
      "import \"./${TM_FILENAME_BASE}.css\";",
      "",
      "interface ${1:${TM_FILENAME_BASE}}Props {",
      "  // props?: string;",
      "}",
      "",
      "const ${1:${TM_FILENAME_BASE}}: React.FC<${TM_FILENAME_BASE}Props> = (props) => {",
      "  return (",
      "    <div>${1:${TM_FILENAME_BASE}}</div>",
      "  );",
      "};",
      "",
      "export default ${1:${TM_FILENAME_BASE}};"
    ],
    "description": "fgp_component_props snippet"
  },
  "fgp_component_structure": {
    "prefix": "fgp_component_structure",
    "body": [
      "import React from 'react';",
      "",
      "interface ${1:Props} {",
      "  title?: string;",
      "  description?: string;",
      "}",
      "",
      "const ${2:ComponentName}: React.FC<$1> = ({ title = \"$3\", description = \"$4\" }) => {",
      "  return (",
      "    <div className=\"${5:wrapper}\">",
      "      <h1>{title}</h1>",
      "      <p>{description}</p>",
      "    </div>",
      "  );",
      "};",
      "",
      "export default $2;"
    ],
    "description": "fgp_component_structure snippet"
  },
  "fgp_custom_hook": {
    "prefix": "fgp_custom_hook",
    "body": [
      "import { useState, useEffect } from 'react';",
      "",
      "function use${1:CustomHook}<T>(initialValue: T): [T, React.Dispatch<React.SetStateAction<T>>] {",
      "  const [value, setValue] = useState<T>(initialValue);",
      "",
      "  useEffect(() => {",
      "    // Logic on mount or update",
      "  }, [value]);",
      "",
      "  return [value, setValue];",
      "}",
      "",
      "export default use${1:CustomHook};"
    ],
    "description": "fgp_custom_hook snippet"
  },
  "fgp_rn_component": {
    "prefix": "fgp_rn_component",
    "body": [
      "// ${TM_FILENAME_BASE}.tsx",
      "",
      "import React from \"react\";",
      "import { StyleSheet, Text, View } from \"react-native\";",
      "",
      "const ${1:${TM_FILENAME_BASE}} = () => {",
      "  return (",
      "    <View style={styles.container}>",
      "      <Text>${1:${TM_FILENAME_BASE}}</Text>",
      "    </View>",
      "  )",
      "}",
      "",
      "export default ${1:${TM_FILENAME_BASE}}",
      "",
      "const styles = StyleSheet.create({",
      "  container: {",
      "    flex: 1,",
      "    backgroundColor: \"#fff\",",
      "    alignItems: \"center\",",
      "    justifyContent: \"center\",",
      "  },",
      "});"
    ],
    "description": "fgp_rn_component snippet"
  },
  "fgp_rn_hello_world": {
    "prefix": "fgp_rn_hello_world",
    "body": [
      "//  ${1:${TM_FILENAME_BASE}}.tsx",
      "",
      "import { StatusBar } from \"expo-status-bar\";",
      "import { StyleSheet, Text, View } from \"react-native\";",
      "",
      "export default function  ${1:${TM_FILENAME_BASE}}() {",
      "  return (",
      "    <View style={styles.container}>",
      "      <Text> ${1:${TM_FILENAME_BASE}}</Text>",
      "      <Text>Hello world!</Text>",
      "      <StatusBar style=\"auto\" />",
      "    </View>",
      "  );",
      "}",
      "",
      "const styles = StyleSheet.create({",
      "  container: {",
      "    flex: 1,",
      "    backgroundColor: \"#fff\",",
      "    alignItems: \"center\",",
      "    justifyContent: \"center\",",
      "  },",
      "});"
    ],
    "description": "fgp_rn_hello_world snippet"
  },
  "fgp_rn_layout_slot": {
    "prefix": "fgp_rn_layout_slot",
    "body": [
      "import { Slot } from 'expo-router';",
      "",
      "export default function ${1:App}Layout() {",
      "  return <Slot />;",
      "}"
    ],
    "description": "fgp_rn_layout_slot snippet"
  },
  "fgp_rn_layout_stack": {
    "prefix": "fgp_rn_layout_stack",
    "body": [
      "// ${1:${TM_FILENAME_BASE}}.tsx",
      "",
      "import { Stack } from \"expo-router\";",
      "",
      "export default function ${1:App}Layout() {",
      "  return <Stack />;",
      "}"
    ],
    "description": "fgp_rn_layout_stack snippet"
  },
  "fgp_rn_layout_stack2": {
    "prefix": "fgp_rn_layout_stack2",
    "body": [
      "// ${1:${TM_FILENAME_BASE}}.tsx",
      "",
      "import { Stack } from 'expo-router';",
      "",
      "export default function ${1:App}Layout() {",
      "  return (",
      "    <Stack",
      "      screenOptions={{",
      "        headerStyle: {",
      "          backgroundColor: '#f4511e',",
      "        },",
      "        headerTintColor: '#fff',",
      "        headerTitleStyle: {",
      "          fontWeight: 'bold',",
      "        },",
      "      }}>",
      "      {/* Optionally configure static options outside the route.*/}",
      "      <Stack.Screen name=\"home\" options={{}} />",
      "    </Stack>",
      "  );",
      "}"
    ],
    "description": "fgp_rn_layout_stack2 snippet"
  },
  "fgp_rn_layout_tab": {
    "prefix": "fgp_rn_layout_tab",
    "body": [
      "// ${1:${TM_FILENAME_BASE}}.tsx",
      "",
      "import FontAwesome from \"@expo/vector-icons/FontAwesome\";",
      "import { Tabs } from \"expo-router\";",
      "",
      "export default function ${1:App}Layout() {",
      "  return (",
      "    <Tabs screenOptions={{ tabBarActiveTintColor: \"blue\" }}>",
      "      <Tabs.Screen",
      "        name=\"index\"",
      "        options={{",
      "          title: \"Home\",",
      "          tabBarIcon: ({ color }) => <FontAwesome size={28} name=\"home\" color={color} />,",
      "        }}",
      "      />",
      "      <Tabs.Screen",
      "        name=\"settings\"",
      "        options={{",
      "          title: \"Settings\",",
      "          tabBarIcon: ({ color }) => <FontAwesome size={28} name=\"cog\" color={color} />,",
      "        }}",
      "      />",
      "    </Tabs>",
      "  );",
      "}"
    ],
    "description": "fgp_rn_layout_tab snippet"
  },
  "fgp_rn_login": {
    "prefix": "fgp_rn_login",
    "body": [
      "import React, { useState } from \"react\";",
      "import {",
      "  View,",
      "  Text,",
      "  TextInput,",
      "  TouchableOpacity,",
      "  StyleSheet,",
      "  Alert,",
      "  KeyboardAvoidingView,",
      "  Platform,",
      "  ScrollView,",
      "  ActivityIndicator,",
      "} from \"react-native\";",
      "import { StatusBar } from \"expo-status-bar\";",
      "import { Ionicons } from \"@expo/vector-icons\";",
      "",
      "interface LoginProps {",
      "  onLogin?: (email: string, password: string) => Promise<void>;",
      "  onForgotPassword?: () => void;",
      "  onSignUp?: () => void;",
      "}",
      "",
      "const Login: React.FC<LoginProps> = ({ onLogin, onForgotPassword, onSignUp }) => {",
      "  const [email, setEmail] = useState(\"\");",
      "  const [password, setPassword] = useState(\"\");",
      "  const [showPassword, setShowPassword] = useState(false);",
      "  const [isLoading, setIsLoading] = useState(false);",
      "",
      "  const validateEmail = (email: string): boolean => {",
      "    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;",
      "    return emailRegex.test(email);",
      "  };",
      "",
      "  const handleLogin = async () => {",
      "    // Validaciones básicas",
      "    if (!email.trim()) {",
      "      Alert.alert(\"Error\", \"Por favor ingresa tu email\");",
      "      return;",
      "    }",
      "",
      "    if (!validateEmail(email)) {",
      "      Alert.alert(\"Error\", \"Por favor ingresa un email válido\");",
      "      return;",
      "    }",
      "",
      "    if (!password.trim()) {",
      "      Alert.alert(\"Error\", \"Por favor ingresa tu contraseña\");",
      "      return;",
      "    }",
      "",
      "    if (password.length < 6) {",
      "      Alert.alert(\"Error\", \"La contraseña debe tener al menos 6 caracteres\");",
      "      return;",
      "    }",
      "",
      "    setIsLoading(true);",
      "",
      "    try {",
      "      if (onLogin) {",
      "        await onLogin(email, password);",
      "      } else {",
      "        // Simulación de login por defecto",
      "        await new Promise((resolve) => setTimeout(resolve, 2000));",
      "        Alert.alert(\"Éxito\", \"Inicio de sesión exitoso\");",
      "      }",
      "    } catch (error) {",
      "      Alert.alert(\"Error\", \"Credenciales incorrectas\");",
      "    } finally {",
      "      setIsLoading(false);",
      "    }",
      "  };",
      "",
      "  return (",
      "    <KeyboardAvoidingView style={styles.container} behavior={Platform.OS === \"ios\" ? \"padding\" : \"height\"}>",
      "      <StatusBar style=\"dark\" />",
      "      <ScrollView contentContainerStyle={styles.scrollContainer} showsVerticalScrollIndicator={false}>",
      "        <View style={styles.header}>",
      "          <Text style={styles.title}>Bienvenido</Text>",
      "          <Text style={styles.subtitle}>Inicia sesión en tu cuenta</Text>",
      "        </View>",
      "",
      "        <View style={styles.form}>",
      "          {/* Campo Email */}",
      "          <View style={styles.inputContainer}>",
      "            <Text style={styles.label}>Email</Text>",
      "            <View style={styles.inputWrapper}>",
      "              <Ionicons name=\"mail-outline\" size={20} color=\"#9CA3AF\" style={styles.inputIcon} />",
      "              <TextInput",
      "                style={styles.input}",
      "                placeholder=\"tu@email.com\"",
      "                placeholderTextColor=\"#9CA3AF\"",
      "                value={email}",
      "                onChangeText={setEmail}",
      "                keyboardType=\"email-address\"",
      "                autoCapitalize=\"none\"",
      "                autoComplete=\"email\"",
      "              />",
      "            </View>",
      "          </View>",
      "",
      "          {/* Campo Contraseña */}",
      "          <View style={styles.inputContainer}>",
      "            <Text style={styles.label}>Contraseña</Text>",
      "            <View style={styles.inputWrapper}>",
      "              <Ionicons name=\"lock-closed-outline\" size={20} color=\"#9CA3AF\" style={styles.inputIcon} />",
      "              <TextInput",
      "                style={[styles.input, styles.passwordInput]}",
      "                placeholder=\"••••••••\"",
      "                placeholderTextColor=\"#9CA3AF\"",
      "                value={password}",
      "                onChangeText={setPassword}",
      "                secureTextEntry={!showPassword}",
      "                autoComplete=\"password\"",
      "              />",
      "              <TouchableOpacity style={styles.eyeIcon} onPress={() => setShowPassword(!showPassword)}>",
      "                <Ionicons name={showPassword ? \"eye-off-outline\" : \"eye-outline\"} size={20} color=\"#9CA3AF\" />",
      "              </TouchableOpacity>",
      "            </View>",
      "          </View>",
      "",
      "          {/* Olvidaste tu contraseña */}",
      "          <TouchableOpacity style={styles.forgotPassword} onPress={onForgotPassword}>",
      "            <Text style={styles.forgotPasswordText}>¿Olvidaste tu contraseña?</Text>",
      "          </TouchableOpacity>",
      "",
      "          {/* Botón de Login */}",
      "          <TouchableOpacity",
      "            style={[styles.loginButton, isLoading && styles.loginButtonDisabled]}",
      "            onPress={handleLogin}",
      "            disabled={isLoading}",
      "          >",
      "            {isLoading ? (",
      "              <ActivityIndicator color=\"#FFFFFF\" size=\"small\" />",
      "            ) : (",
      "              <Text style={styles.loginButtonText}>Iniciar Sesión</Text>",
      "            )}",
      "          </TouchableOpacity>",
      "",
      "          {/* Divider */}",
      "          <View style={styles.divider}>",
      "            <View style={styles.dividerLine} />",
      "            <Text style={styles.dividerText}>o</Text>",
      "            <View style={styles.dividerLine} />",
      "          </View>",
      "",
      "          {/* Botón de Registro */}",
      "          <TouchableOpacity style={styles.signUpButton} onPress={onSignUp} disabled={isLoading}>",
      "            <Text style={styles.signUpButtonText}>¿No tienes cuenta? Regístrate</Text>",
      "          </TouchableOpacity>",
      "        </View>",
      "      </ScrollView>",
      "    </KeyboardAvoidingView>",
      "  );",
      "};",
      "",
      "const styles = StyleSheet.create({",
      "  container: {",
      "    flex: 1,",
      "    backgroundColor: \"#FFFFFF\",",
      "  },",
      "  scrollContainer: {",
      "    flexGrow: 1,",
      "    justifyContent: \"center\",",
      "    padding: 24,",
      "  },",
      "  header: {",
      "    alignItems: \"center\",",
      "    marginBottom: 40,",
      "  },",
      "  title: {",
      "    fontSize: 32,",
      "    fontWeight: \"bold\",",
      "    color: \"#111827\",",
      "    marginBottom: 8,",
      "  },",
      "  subtitle: {",
      "    fontSize: 16,",
      "    color: \"#6B7280\",",
      "    textAlign: \"center\",",
      "  },",
      "  form: {",
      "    width: \"100%\",",
      "  },",
      "  inputContainer: {",
      "    marginBottom: 20,",
      "  },",
      "  label: {",
      "    fontSize: 16,",
      "    fontWeight: \"600\",",
      "    color: \"#374151\",",
      "    marginBottom: 8,",
      "  },",
      "  inputWrapper: {",
      "    flexDirection: \"row\",",
      "    alignItems: \"center\",",
      "    backgroundColor: \"#F9FAFB\",",
      "    borderRadius: 12,",
      "    borderWidth: 1,",
      "    borderColor: \"#E5E7EB\",",
      "    paddingHorizontal: 16,",
      "    height: 52,",
      "  },",
      "  inputIcon: {",
      "    marginRight: 12,",
      "  },",
      "  input: {",
      "    flex: 1,",
      "    fontSize: 16,",
      "    color: \"#111827\",",
      "    height: \"100%\",",
      "  },",
      "  passwordInput: {",
      "    paddingRight: 40,",
      "  },",
      "  eyeIcon: {",
      "    position: \"absolute\",",
      "    right: 16,",
      "    height: \"100%\",",
      "    justifyContent: \"center\",",
      "    alignItems: \"center\",",
      "    width: 24,",
      "  },",
      "  forgotPassword: {",
      "    alignSelf: \"flex-end\",",
      "    marginBottom: 24,",
      "  },",
      "  forgotPasswordText: {",
      "    fontSize: 14,",
      "    color: \"#3B82F6\",",
      "    fontWeight: \"500\",",
      "  },",
      "  loginButton: {",
      "    backgroundColor: \"#3B82F6\",",
      "    borderRadius: 12,",
      "    height: 52,",
      "    justifyContent: \"center\",",
      "    alignItems: \"center\",",
      "    marginBottom: 24,",
      "    shadowColor: \"#3B82F6\",",
      "    shadowOffset: {",
      "      width: 0,",
      "      height: 2,",
      "    },",
      "    shadowOpacity: 0.2,",
      "    shadowRadius: 4,",
      "    elevation: 3,",
      "  },",
      "  loginButtonDisabled: {",
      "    backgroundColor: \"#9CA3AF\",",
      "    shadowOpacity: 0,",
      "    elevation: 0,",
      "  },",
      "  loginButtonText: {",
      "    color: \"#FFFFFF\",",
      "    fontSize: 16,",
      "    fontWeight: \"600\",",
      "  },",
      "  divider: {",
      "    flexDirection: \"row\",",
      "    alignItems: \"center\",",
      "    marginBottom: 24,",
      "  },",
      "  dividerLine: {",
      "    flex: 1,",
      "    height: 1,",
      "    backgroundColor: \"#E5E7EB\",",
      "  },",
      "  dividerText: {",
      "    marginHorizontal: 16,",
      "    fontSize: 14,",
      "    color: \"#9CA3AF\",",
      "  },",
      "  signUpButton: {",
      "    alignItems: \"center\",",
      "    paddingVertical: 12,",
      "  },",
      "  signUpButtonText: {",
      "    fontSize: 16,",
      "    color: \"#3B82F6\",",
      "    fontWeight: \"500\",",
      "  },",
      "});",
      "",
      "export default Login;"
    ],
    "description": "fgp_rn_login snippet"
  },
  "fgp_rn_params": {
    "prefix": "fgp_rn_params",
    "body": [
      "// ${TM_FILENAME_BASE}.tsx",
      "",
      "import { useLocalSearchParams } from \"expo-router\";",
      "import React from \"react\";",
      "import { StyleSheet, Text, View } from \"react-native\";",
      "",
      "const  ${1:${TM_FILENAME_BASE}}Params = () => {",
      "  const { ${2:id} } = useLocalSearchParams();",
      "",
      "  return (",
      "    <View style={styles.container}>",
      "      <Text> ${1:${TM_FILENAME_BASE}} {${2:id}}</Text>",
      "    </View>",
      "  );",
      "};",
      "",
      "export default  ${1:${TM_FILENAME_BASE}}Params;",
      "",
      "const styles = StyleSheet.create({",
      "  container: {",
      "    flex: 1,",
      "    backgroundColor: \"#fff\",",
      "    alignItems: \"center\",",
      "    justifyContent: \"center\",",
      "  },",
      "});"
    ],
    "description": "fgp_rn_params snippet"
  },
  "fgp_state_management": {
    "prefix": "fgp_state_management",
    "body": [
      "import React, { useState, useEffect } from 'react';",
      "",
      "const ${1:ComponentName} = () => {",
      "  const [${2:count}, set${3:Count}] = useState<number>(${4:0});",
      "",
      "  useEffect(() => {",
      "    console.log('Component mounted or ${2:count} changed');",
      "    return () => {",
      "      console.log('Cleanup on unmount');",
      "    };",
      "  }, [${2:count}]);",
      "",
      "  const handleIncrement = () => {",
      "    set${3:Count}(${2:count} + 1);",
      "  };",
      "",
      "  return (",
      "    <div>",
      "      <h1>{${2:count}}</h1>",
      "      <button onClick={handleIncrement}>Increment</button>",
      "    </div>",
      "  );",
      "};",
      "",
      "export default $1;"
    ],
    "description": "fgp_state_management snippet"
  },
  "fgp_useEffect_fetch": {
    "prefix": "fgp_useEffect_fetch",
    "body": [
      "import { useEffect, useState } from 'react';",
      "",
      "const ${1:MyComponent} = () => {",
      "  const [${2:data}, set${3:Data}] = useState<any>(null);",
      "  const [${4:loading}, set${5:Loading}] = useState<boolean>(true);",
      "  const [${6:error}, set${7:Error}] = useState<Error | null>(null);",
      "",
      "  useEffect(() => {",
      "    const fetchData = async () => {",
      "      try {",
      "        const response = await fetch('${8:/api/data}');",
      "        const result = await response.json();",
      "        set${3:Data}(result);",
      "      } catch (err: any) {",
      "        set${7:Error}(err);",
      "      } finally {",
      "        set${5:Loading}(false);",
      "      }",
      "    };",
      "",
      "    fetchData();",
      "  }, []);",
      "",
      "  if (${4:loading}) return <p>Loading...</p>;",
      "  if (${6:error}) return <p>Error: {${6:error}.message}</p>;",
      "",
      "  return (",
      "    <div>",
      "      <pre>{JSON.stringify(${2:data}, null, 2)}</pre>",
      "    </div>",
      "  );",
      "};",
      "",
      "export default ${1:MyComponent};"
    ],
    "description": "fgp_useEffect_fetch snippet"
  }
}