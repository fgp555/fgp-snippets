{
  "fgp_rn_component": {
    "prefix": "fgp_rn_component",
    "body": [
      "// ${TM_FILENAME_BASE}.tsx",
      "",
      "import { Text, View } from \"react-native\";",
      "",
      "export default function ${1:${TM_FILENAME_BASE}}() {",
      "  return (",
      "    <View style={{ flex: 1, justifyContent: \"center\", alignItems: \"center\" }}>",
      "      <Text>${1:${TM_FILENAME_BASE}}</Text>",
      "    </View>",
      "  );",
      "}"
    ],
    "description": "fgp_rn_component snippet"
  },
  "fgp_rn_component2": {
    "prefix": "fgp_rn_component2",
    "body": [
      "//  ${1:${TM_FILENAME_BASE}}.tsx",
      "",
      "import { StatusBar } from \"expo-status-bar\";",
      "import { StyleSheet, Text, View } from \"react-native\";",
      "",
      "export default function  ${1:${TM_FILENAME_BASE}}() {",
      "  return (",
      "    <View style={styles.container}>",
      "      <Text> ${1:${TM_FILENAME_BASE}}</Text>",
      "      <Text>Hello world!</Text>",
      "      <StatusBar style=\"auto\" />",
      "    </View>",
      "  );",
      "}",
      "",
      "const styles = StyleSheet.create({",
      "  container: {",
      "    flex: 1,",
      "    backgroundColor: \"#fff\",",
      "    alignItems: \"center\",",
      "    justifyContent: \"center\",",
      "  },",
      "});"
    ],
    "description": "fgp_rn_component2 snippet"
  },
  "fgp_rn_icons": {
    "prefix": "fgp_rn_icons",
    "body": [
      "<FontAwesome.Button name=\"facebook\" backgroundColor=\"#3b5998\" onPress={loginWithFacebook}>",
      "Login with Facebook",
      "</FontAwesome.Button>",
      "",
      "{/* https://fontawesome.com/search */}",
      "<FontAwesome name=\"apple\" size={25} />",
      "<FontAwesome6 name={\"house\"} size={24} color=\"#b00\" />",
      "",
      "{/* https://ionic.io/ionicons */}",
      "<Ionicons name=\"checkmark-circle\" size={32} color=\"green\" />",
      "",
      "{/* https://material.io/resources/icons */}",
      "<MaterialIcons name=\"fingerprint\" color=\"#b00\" size={25} />",
      "",
      "{/* Icons ",
      "    https://icons.expo.fyi/Index",
      "    ",
      "    Icon SVG Generator",
      "    https://react-svgr.com/playground/?native=true */}"
    ],
    "description": "fgp_rn_icons snippet"
  },
  "fgp_rn_icons_screen": {
    "prefix": "fgp_rn_icons_screen",
    "body": [
      "import { Link } from \"expo-router\";",
      "import { View, StyleSheet, Image, Text } from \"react-native\";",
      "import Ionicons from \"@expo/vector-icons/Ionicons\";",
      "import {",
      "  AntDesign,",
      "  Entypo,",
      "  EvilIcons,",
      "  Feather,",
      "  FontAwesome,",
      "  FontAwesome6,",
      "  Fontisto,",
      "  Foundation,",
      "  MaterialCommunityIcons,",
      "  MaterialIcons,",
      "  Octicons,",
      "  SimpleLineIcons,",
      "  Zocial,",
      "} from \"@expo/vector-icons\";",
      "",
      "export default function Icons() {",
      "  const loginWithFacebook = () => {",
      "    console.log(\"Button pressed\");",
      "  };",
      "",
      "",
      "  return (",
      "    <View style={styles.container}>",
      "      <FontAwesome.Button name=\"facebook\" backgroundColor=\"#3b5998\" onPress={loginWithFacebook}>",
      "        Login with Facebook",
      "      </FontAwesome.Button>",
      "",
      "      {/* https://fontawesome.com/search */}",
      "      <FontAwesome name=\"apple\" size={25} />",
      "      <FontAwesome6 name={\"house\"} size={24} color=\"#b00\" />",
      "",
      "      {/* https://ionic.io/ionicons */}",
      "      <Ionicons name=\"checkmark-circle\" size={32} color=\"green\" />",
      "",
      "      {/* https://material.io/resources/icons */}",
      "      <MaterialIcons name=\"fingerprint\" color=\"#b00\" size={25} />",
      "",
      "      {/* https://icons.expo.fyi/Index */}",
      "      <AntDesign name=\"chrome\" size={24} color=\"black\" />",
      "",
      "      {/* https://icongr.am/entypo */}",
      "      <Entypo name=\"colours\" size={24} color=\"black\" />",
      "",
      "      {/* https://icons.expo.fyi/ */}",
      "      <EvilIcons name=\"user\" size={24} color=\"black\" />",
      "",
      "      {/* https://feathericons.com/ */}",
      "      <Feather name=\"coffee\" size={24} color=\"black\" />",
      "",
      "      {/* https://zurb.com/playground/foundation-icon-fonts-3 */}",
      "      <Foundation name=\"social-amazon\" size={24} color=\"black\" />",
      "",
      "      {/* https://static.enapter.com/rn/icons/material-community.html */}",
      "      <MaterialCommunityIcons name=\"airballoon-outline\" size={24} color=\"black\" />",
      "",
      "      {/* https://primer.style/foundations/icons */}",
      "      <Octicons name=\"feed-tag\" size={24} color=\"black\" />",
      "",
      "      {/* https://simplelineicons.github.io/ */}",
      "      <SimpleLineIcons name=\"directions\" size={24} color=\"black\" />",
      "",
      "      <Zocial name=\"github\" size={24} color=\"black\" />",
      "      <Fontisto name=\"adobe\" size={24} color=\"black\" />",
      "",
      "      <Image source={require(\"../assets/icon.png\")} style={{ width: 50, height: 50 }} />",
      "",
      "      <Link href=\"/customIcon\" style={{ marginTop: 50 }}>",
      "        <Text>Custom Icon Example</Text>",
      "      </Link>",
      "    </View>",
      "  );",
      "}",
      "",
      "const styles = StyleSheet.create({",
      "  container: {",
      "    flex: 1,",
      "    justifyContent: \"center\",",
      "    alignItems: \"center\",",
      "  },",
      "});",
      "",
      "",
      "/* ",
      "    Icons ",
      "    https://icons.expo.fyi/Index",
      "    ",
      "    Icon SVG Generator",
      "    https://react-svgr.com/playground/?native=true ",
      "",
      "    https://icons.expo.fyi/Index",
      "    https://docs.expo.dev/guides/icons",
      "*/"
    ],
    "description": "fgp_rn_icons_screen snippet"
  },
  "fgp_rn_layout_drawer": {
    "prefix": "fgp_rn_layout_drawer",
    "body": [
      "import { Drawer } from \"expo-router/drawer\";",
      "import { GestureHandlerRootView } from 'react-native-gesture-handler';",
      "",
      "export default function Layout() {",
      "  return (",
      "    <GestureHandlerRootView style={{ flex: 1 }}>",
      "      <Drawer    />",
      "    </GestureHandlerRootView>",
      "  );",
      "}",
      "",
      "/* ",
      "",
      "npx expo install @react-navigation/drawer react-native-gesture-handler react-native-reanimated",
      "",
      "*/"
    ],
    "description": "fgp_rn_layout_drawer snippet"
  },
  "fgp_rn_layout_drawer2": {
    "prefix": "fgp_rn_layout_drawer2",
    "body": [
      "import { GestureHandlerRootView } from \"react-native-gesture-handler\";",
      "import { Drawer } from \"expo-router/drawer\";",
      "",
      "export default function Layout() {",
      "  return (",
      "    <GestureHandlerRootView style={{ flex: 1 }}>",
      "      <Drawer>",
      "        <Drawer.Screen",
      "          name=\"index\" // This is the name of the page and must match the url from root",
      "          options={{",
      "            drawerLabel: \"Home\",",
      "            title: \"overview\",",
      "          }}",
      "        />",
      "        <Drawer.Screen",
      "          name=\"user/[id]\" // This is the name of the page and must match the url from root",
      "          options={{",
      "            drawerLabel: \"User\",",
      "            title: \"overview\",",
      "          }}",
      "        />",
      "      </Drawer>",
      "    </GestureHandlerRootView>",
      "  );",
      "}",
      "",
      "/* ",
      "",
      "npx expo install @react-navigation/drawer react-native-gesture-handler react-native-reanimated",
      "",
      "*/"
    ],
    "description": "fgp_rn_layout_drawer2 snippet"
  },
  "fgp_rn_layout_drawer3custom": {
    "prefix": "fgp_rn_layout_drawer3custom",
    "body": [
      "import { FontAwesome6 } from \"@expo/vector-icons\";",
      "import { DrawerContentComponentProps, DrawerContentScrollView } from \"@react-navigation/drawer\";",
      "import Constants from \"expo-constants\";",
      "import { usePathname, useRouter } from \"expo-router\";",
      "import Drawer from \"expo-router/drawer\";",
      "import React from \"react\";",
      "import { Image, Linking, StyleSheet, Text, TouchableOpacity, View } from \"react-native\";",
      "",
      "export default function DrawerLayout() {",
      "  return (",
      "    <Drawer",
      "      drawerContent={CustomDrawer}",
      "      screenOptions={({ navigation }) => ({",
      "        drawerPosition: \"left\",",
      "        headerLeft: () => (",
      "          <TouchableOpacity onPress={() => navigation.toggleDrawer()} style={{ marginLeft: 15 }}>",
      "            <FontAwesome6 name=\"bars\" size={24} color=\"#b00\" />",
      "          </TouchableOpacity>",
      "        ),",
      "        headerTintColor: \"#b00\",",
      "        headerTitleAlign: \"center\",",
      "        // headerStyle: { backgroundColor: \"#b008\" },",
      "      })}",
      "    ></Drawer>",
      "  );",
      "}",
      "",
      "const CustomDrawer = (props: DrawerContentComponentProps) => {",
      "  const router = useRouter() as any;",
      "  const pathname = usePathname();",
      "",
      "  const isAdmin = true;",
      "  const playStoreUrl = \"https://play.google.com/store/apps/details?id=com.fgp.app\";",
      "  const backendDomain = \"api.fgp.com\";",
      "  const androidVersion = Constants.expoConfig?.version;",
      "  const imgLogo = \"https://i.postimg.cc/FRn26Vhg/fgp-team-logo.png\";",
      "",
      "  const handleLogout = () => {",
      "    console.log(\"handleLogout\");",
      "    router.push(\"/\");",
      "  };",
      "",
      "  return (",
      "    <DrawerContentScrollView {...props} contentContainerStyle={styles.container}>",
      "      <View style={styles.content}>",
      "        <View style={styles.header}>",
      "          {/* <Image source={require(\"@/src/assets/images/logo-business.png\")} style={styles.img} /> */}",
      "          <Image source={{ uri: imgLogo }} style={styles.img} />",
      "        </View>",
      "        {isAdmin && (",
      "          <>",
      "            <TouchableOpacity",
      "              onPress={() => router.push(\"/user/list\")}",
      "              style={[styles.buttonContainer, pathname === \"/user/list\" && styles.activeButton]}",
      "            >",
      "              <View style={styles.button}>",
      "                <FontAwesome6",
      "                  name=\"users\"",
      "                  size={16}",
      "                  color={pathname === \"/user/list\" ? \"#fff\" : \"#333\"}",
      "                  style={styles.icon}",
      "                />",
      "                <Text style={[styles.buttonText, pathname === \"/user/list\" && styles.activeButtonText]}>Usuarios</Text>",
      "              </View>",
      "              <FontAwesome6",
      "                name=\"chevron-right\"",
      "                size={16}",
      "                color={pathname === \"/user/list\" ? \"#fff\" : \"#333\"}",
      "                style={styles.icon}",
      "              />",
      "            </TouchableOpacity>",
      "          </>",
      "        )}",
      "        <TouchableOpacity",
      "          onPress={() => router.push(\"/profile\")}",
      "          style={[styles.buttonContainer, pathname === \"/profile\" && styles.activeButton]}",
      "        >",
      "          <View style={styles.button}>",
      "            <FontAwesome6 name=\"user\" size={16} color={pathname === \"/profile\" ? \"#fff\" : \"#333\"} style={styles.icon} />",
      "            <Text style={[styles.buttonText, pathname === \"/profile\" && styles.activeButtonText]}>Mi Perfil</Text>",
      "          </View>",
      "          <FontAwesome6",
      "            name=\"chevron-right\"",
      "            size={16}",
      "            color={pathname === \"/profile\" ? \"#fff\" : \"#333\"}",
      "            style={styles.icon}",
      "          />",
      "        </TouchableOpacity>",
      "      </View>",
      "",
      "      <View style={styles.logoutContainer}>",
      "        <TouchableOpacity onPress={handleLogout} style={[styles.button, styles.logoutButton]}>",
      "          <FontAwesome6 name=\"right-from-bracket\" size={16} style={styles.icon} color={\"#b00\"} />",
      "          <Text style={[styles.buttonText, styles.logoutButtonText]}>Cerrar Sesión</Text>",
      "        </TouchableOpacity>",
      "        <TouchableOpacity",
      "          onPress={() => router.push(\"/about\")}",
      "          style={[styles.buttonContainer, pathname === \"/about\" && styles.activeButton]}",
      "        >",
      "          <View style={styles.button}>",
      "            <FontAwesome6",
      "              name=\"circle-info\"",
      "              size={16}",
      "              color={pathname === \"/about\" ? \"#fff\" : \"#333\"}",
      "              style={styles.icon}",
      "            />",
      "            <Text style={[styles.buttonText, pathname === \"/about\" && styles.activeButtonText]}>Acerca de</Text>",
      "          </View>",
      "          <FontAwesome6",
      "            name=\"chevron-right\"",
      "            size={16}",
      "            color={pathname === \"/about\" ? \"#fff\" : \"#333\"}",
      "            style={styles.icon}",
      "          />",
      "        </TouchableOpacity>",
      "        <TouchableOpacity onPress={() => Linking.openURL(playStoreUrl)} style={[styles.buttonContainer]}>",
      "          <View style={styles.button}>",
      "            <FontAwesome6 name=\"google-play\" size={16} color={\"#333\"} style={styles.icon} />",
      "            <Text style={[styles.buttonText]}>Actualizar</Text>",
      "          </View>",
      "          <FontAwesome6 name=\"up-right-from-square\" size={16} color={\"#333\"} style={styles.icon} />",
      "        </TouchableOpacity>",
      "        <TouchableOpacity onPress={() => Linking.openURL(`https://${backendDomain}`)} style={[styles.buttonContainer]}>",
      "          <View style={styles.button}>",
      "            <FontAwesome6 name=\"globe\" size={16} color={\"#333\"} style={styles.icon} />",
      "            <Text style={[styles.buttonText]}>{backendDomain}</Text>",
      "          </View>",
      "          <FontAwesome6 name=\"up-right-from-square\" size={16} color={\"#333\"} style={styles.icon} />",
      "        </TouchableOpacity>",
      "        <TouchableOpacity style={[styles.buttonContainer]}>",
      "          <View style={styles.button}>",
      "            <FontAwesome6 name=\"download\" size={16} color={\"#777\"} style={styles.icon} />",
      "            <Text",
      "              style={[",
      "                styles.buttonText,",
      "                {",
      "                  color: \"#777\",",
      "                },",
      "              ]}",
      "            >",
      "              build {androidVersion}",
      "            </Text>",
      "          </View>",
      "        </TouchableOpacity>",
      "      </View>",
      "    </DrawerContentScrollView>",
      "  );",
      "};",
      "",
      "const styles = StyleSheet.create({",
      "  container: {",
      "    flex: 1,",
      "    backgroundColor: \"#fff\",",
      "  },",
      "  content: {",
      "    flex: 1,",
      "  },",
      "  header: {",
      "    paddingVertical: 20,",
      "    paddingHorizontal: 15,",
      "    alignItems: \"center\",",
      "    borderBottomWidth: 1,",
      "    borderBottomColor: \"#e0e0e0\",",
      "  },",
      "  headerText: {",
      "    fontSize: 22,",
      "    fontWeight: \"bold\",",
      "    color: \"#333\",",
      "  },",
      "  img: {",
      "    width: 281,",
      "    height: 72,",
      "    marginBottom: 20,",
      "  },",
      "  button: {",
      "    flexDirection: \"row\",",
      "    marginVertical: 5,",
      "    paddingVertical: 3,",
      "    paddingHorizontal: 20,",
      "    alignItems: \"center\",",
      "  },",
      "  buttonContainer: {",
      "    flexDirection: \"row\",",
      "    marginVertical: 5,",
      "    alignItems: \"center\",",
      "    justifyContent: \"space-between\",",
      "  },",
      "  icon: {",
      "    marginRight: 10,",
      "  },",
      "  activeButton: {",
      "    backgroundColor: \"#b00\",",
      "  },",
      "  buttonText: {",
      "    fontSize: 16,",
      "    color: \"#333\",",
      "  },",
      "  activeButtonText: {",
      "    color: \"#fff\",",
      "  },",
      "  logoutContainer: {",
      "    borderTopWidth: 1,",
      "    borderTopColor: \"#e0e0e0\",",
      "  },",
      "  logoutButton: {},",
      "  logoutButtonText: {",
      "    color: \"#b00\",",
      "    textAlign: \"center\",",
      "  },",
      "  profileContainer: {",
      "    padding: 15,",
      "    borderTopWidth: 1,",
      "    borderTopColor: \"#e0e0e0\",",
      "  },",
      "  profileButton: {",
      "    backgroundColor: \"#2196f3\",",
      "  },",
      "  profileButtonText: {",
      "    color: \"#fff\",",
      "    textAlign: \"center\",",
      "  },",
      "});"
    ],
    "description": "fgp_rn_layout_drawer3custom snippet"
  },
  "fgp_rn_layout_drawer4custom": {
    "prefix": "fgp_rn_layout_drawer4custom",
    "body": [
      "import { FontAwesome6 } from \"@expo/vector-icons\";",
      "import { DrawerContentComponentProps, DrawerContentScrollView } from \"@react-navigation/drawer\";",
      "import Constants from \"expo-constants\";",
      "import { LinearGradient } from 'expo-linear-gradient';",
      "import { usePathname, useRouter } from \"expo-router\";",
      "import Drawer from \"expo-router/drawer\";",
      "import React from \"react\";",
      "import { Image, Linking, Platform, StyleSheet, Text, TouchableOpacity, View } from \"react-native\";",
      "",
      "export default function DrawerLayout() {",
      "  return (",
      "    <Drawer",
      "      drawerContent={ModernCustomDrawer}",
      "      screenOptions={({ navigation  }) => ({",
      "        drawerPosition: \"left\",",
      "        headerLeft: () => (",
      "          <TouchableOpacity ",
      "            onPress={() => navigation.toggleDrawer()} ",
      "            style={styles.headerButton}",
      "            activeOpacity={0.7}",
      "          >",
      "            <FontAwesome6 name=\"bars\" size={22} color=\"#1a1a1a\" />",
      "          </TouchableOpacity>",
      "        ),",
      "        headerTintColor: \"#1a1a1a\",",
      "        headerTitleAlign: \"center\",",
      "        headerStyle: { ",
      "          backgroundColor: \"#ffffff\",",
      "          elevation: 0,",
      "          shadowOpacity: 0,",
      "          borderBottomWidth: 1,",
      "          borderBottomColor: \"#f0f0f0\",",
      "        },",
      "        headerTitleStyle: {",
      "          fontWeight: \"600\",",
      "          fontSize: 18,",
      "        },",
      "      })}",
      "    />",
      "  );",
      "}",
      "",
      "const ModernCustomDrawer = (props: DrawerContentComponentProps) => {",
      "  const router = useRouter() as any;",
      "  const pathname = usePathname();",
      "",
      "  const isAdmin = true;",
      "  const playStoreUrl = \"https://play.google.com/store/apps/details?id=com.fgp.app\";",
      "  const backendDomain = \"api.fgp.com\";",
      "  const androidVersion = Constants.expoConfig?.version;",
      "  const imgLogo = \"https://i.postimg.cc/FRn26Vhg/fgp-team-logo.png\";",
      "",
      "  const handleLogout = () => {",
      "    console.log(\"handleLogout\");",
      "    router.push(\"/\");",
      "  };",
      "",
      "  const MenuItem = ({ ",
      "    icon, ",
      "    title, ",
      "    onPress, ",
      "    isActive = false, ",
      "    showChevron = true, ",
      "    iconColor = \"#64748b\",",
      "    isExternal = false ",
      "  }: {",
      "    icon: string;",
      "    title: string;",
      "    onPress: () => void;",
      "    isActive?: boolean;",
      "    showChevron?: boolean;",
      "    iconColor?: string;",
      "    isExternal?: boolean;",
      "  }) => (",
      "    <TouchableOpacity",
      "      onPress={onPress}",
      "      style={[styles.menuItem, isActive && styles.activeMenuItem]}",
      "      activeOpacity={0.7}",
      "    >",
      "      <View style={styles.menuItemContent}>",
      "        <View style={[styles.iconContainer, isActive && styles.activeIconContainer]}>",
      "          <FontAwesome6 ",
      "            name={icon as any} ",
      "            size={18} ",
      "            color={isActive ? \"#ffffff\" : iconColor} ",
      "          />",
      "        </View>",
      "        <Text style={[",
      "          styles.menuItemText, ",
      "          isActive && styles.activeMenuItemText",
      "        ]}>",
      "          {title}",
      "        </Text>",
      "      </View>",
      "      {showChevron && (",
      "        <FontAwesome6",
      "          name={isExternal ? \"up-right-from-square\" : \"chevron-right\"}",
      "          size={14}",
      "          color={isActive ? \"#ffffff\" : \"#94a3b8\"}",
      "        />",
      "      )}",
      "    </TouchableOpacity>",
      "  );",
      "",
      "  return (",
      "    <DrawerContentScrollView ",
      "      {...props} ",
      "      contentContainerStyle={styles.container}",
      "      showsVerticalScrollIndicator={false}",
      "    >",
      "      {/* Header with gradient */}",
      "      <LinearGradient",
      "        colors={['#667eea', '#764ba2']}",
      "        start={{ x: 0, y: 0 }}",
      "        end={{ x: 1, y: 1 }}",
      "        style={styles.header}",
      "      >",
      "        <View style={styles.logoContainer}>",
      "          <Image source={{ uri: imgLogo }} style={styles.logo} />",
      "        </View>",
      "      </LinearGradient>",
      "",
      "      {/* Main Menu Section */}",
      "      <View style={styles.menuSection}>",
      "        <Text style={styles.sectionTitle}>Navegación</Text>",
      "        ",
      "        {isAdmin && (",
      "          <MenuItem",
      "            icon=\"users\"",
      "            title=\"Usuarios\"",
      "            onPress={() => router.push(\"/user/list\")}",
      "            isActive={pathname === \"/user/list\"}",
      "            iconColor=\"#3b82f6\"",
      "          />",
      "        )}",
      "        ",
      "        <MenuItem",
      "          icon=\"user\"",
      "          title=\"Mi Perfil\"",
      "          onPress={() => router.push(\"/profile\")}",
      "          isActive={pathname === \"/profile\"}",
      "          iconColor=\"#10b981\"",
      "        />",
      "",
      "        <MenuItem",
      "          icon=\"circle-info\"",
      "          title=\"Acerca de\"",
      "          onPress={() => router.push(\"/about\")}",
      "          isActive={pathname === \"/about\"}",
      "          iconColor=\"#8b5cf6\"",
      "        />",
      "      </View>",
      "",
      "      {/* External Links Section */}",
      "      <View style={styles.menuSection}>",
      "        <Text style={styles.sectionTitle}>Enlaces</Text>",
      "        ",
      "        <MenuItem",
      "          icon=\"google-play\"",
      "          title=\"Actualizar\"",
      "          onPress={() => Linking.openURL(playStoreUrl)}",
      "          showChevron={true}",
      "          iconColor=\"#34d399\"",
      "          isExternal={true}",
      "        />",
      "        ",
      "        <MenuItem",
      "          icon=\"globe\"",
      "          title={backendDomain}",
      "          onPress={() => Linking.openURL(`https://${backendDomain}`)}",
      "          showChevron={true}",
      "          iconColor=\"#06b6d4\"",
      "          isExternal={true}",
      "        />",
      "      </View>",
      "",
      "      {/* Footer Section */}",
      "      <View style={styles.footer}>",
      "        {/* Version Info */}",
      "        <View style={styles.versionContainer}>",
      "          <FontAwesome6 name=\"download\" size={14} color=\"#94a3b8\" />",
      "          <Text style={styles.versionText}>Versión {androidVersion}</Text>",
      "        </View>",
      "",
      "        {/* Logout Button */}",
      "        <TouchableOpacity",
      "          onPress={handleLogout}",
      "          style={styles.logoutButton}",
      "          activeOpacity={0.8}",
      "        >",
      "          <LinearGradient",
      "            colors={['#ef4444', '#dc2626']}",
      "            start={{ x: 0, y: 0 }}",
      "            end={{ x: 1, y: 0 }}",
      "            style={styles.logoutGradient}",
      "          >",
      "            <FontAwesome6 name=\"right-from-bracket\" size={16} color=\"#ffffff\" />",
      "            <Text style={styles.logoutText}>Cerrar Sesión</Text>",
      "          </LinearGradient>",
      "        </TouchableOpacity>",
      "      </View>",
      "    </DrawerContentScrollView>",
      "  );",
      "};",
      "",
      "const styles = StyleSheet.create({",
      "  container: {",
      "    flex: 1,",
      "    backgroundColor: \"#ffffff\",",
      "  },",
      "  headerButton: {",
      "    marginLeft: 16,",
      "    padding: 8,",
      "    borderRadius: 8,",
      "    backgroundColor: \"#f8fafc\",",
      "  },",
      "  header: {",
      "    paddingTop: Platform.OS === 'ios' ? 60 : 40,",
      "    paddingBottom: 30,",
      "    paddingHorizontal: 20,",
      "    marginBottom: 8,",
      "  },",
      "  logoContainer: {",
      "    alignItems: \"center\",",
      "  },",
      "  logo: {",
      "    width: 240,",
      "    height: 60,",
      "    resizeMode: \"contain\",",
      "  },",
      "  menuSection: {",
      "    paddingHorizontal: 16,",
      "    marginBottom: 24,",
      "  },",
      "  sectionTitle: {",
      "    fontSize: 12,",
      "    fontWeight: \"700\",",
      "    color: \"#94a3b8\",",
      "    textTransform: \"uppercase\",",
      "    letterSpacing: 0.5,",
      "    marginBottom: 12,",
      "    marginLeft: 4,",
      "  },",
      "  menuItem: {",
      "    flexDirection: \"row\",",
      "    alignItems: \"center\",",
      "    justifyContent: \"space-between\",",
      "    paddingVertical: 14,",
      "    paddingHorizontal: 16,",
      "    marginBottom: 4,",
      "    borderRadius: 12,",
      "    backgroundColor: \"transparent\",",
      "  },",
      "  activeMenuItem: {",
      "    backgroundColor: \"#667eea\",",
      "    shadowColor: \"#667eea\",",
      "    shadowOffset: {",
      "      width: 0,",
      "      height: 4,",
      "    },",
      "    shadowOpacity: 0.3,",
      "    shadowRadius: 8,",
      "    elevation: 8,",
      "  },",
      "  menuItemContent: {",
      "    flexDirection: \"row\",",
      "    alignItems: \"center\",",
      "    flex: 1,",
      "  },",
      "  iconContainer: {",
      "    width: 36,",
      "    height: 36,",
      "    borderRadius: 10,",
      "    backgroundColor: \"#f1f5f9\",",
      "    alignItems: \"center\",",
      "    justifyContent: \"center\",",
      "    marginRight: 12,",
      "  },",
      "  activeIconContainer: {",
      "    backgroundColor: \"rgba(255, 255, 255, 0.2)\",",
      "  },",
      "  menuItemText: {",
      "    fontSize: 16,",
      "    fontWeight: \"500\",",
      "    color: \"#1e293b\",",
      "    flex: 1,",
      "  },",
      "  activeMenuItemText: {",
      "    color: \"#ffffff\",",
      "    fontWeight: \"600\",",
      "  },",
      "  footer: {",
      "    marginTop: \"auto\",",
      "    paddingHorizontal: 16,",
      "    paddingBottom: 20,",
      "    borderTopWidth: 1,",
      "    borderTopColor: \"#f1f5f9\",",
      "    paddingTop: 20,",
      "  },",
      "  versionContainer: {",
      "    flexDirection: \"row\",",
      "    alignItems: \"center\",",
      "    justifyContent: \"center\",",
      "    paddingVertical: 8,",
      "    marginBottom: 16,",
      "  },",
      "  versionText: {",
      "    fontSize: 12,",
      "    color: \"#94a3b8\",",
      "    marginLeft: 6,",
      "    fontWeight: \"500\",",
      "  },",
      "  logoutButton: {",
      "    borderRadius: 12,",
      "    overflow: \"hidden\",",
      "    shadowColor: \"#ef4444\",",
      "    shadowOffset: {",
      "      width: 0,",
      "      height: 4,",
      "    },",
      "    shadowOpacity: 0.2,",
      "    shadowRadius: 8,",
      "    elevation: 6,",
      "  },",
      "  logoutGradient: {",
      "    flexDirection: \"row\",",
      "    alignItems: \"center\",",
      "    justifyContent: \"center\",",
      "    paddingVertical: 14,",
      "    paddingHorizontal: 20,",
      "  },",
      "  logoutText: {",
      "    fontSize: 16,",
      "    fontWeight: \"600\",",
      "    color: \"#ffffff\",",
      "    marginLeft: 8,",
      "  },",
      "});"
    ],
    "description": "fgp_rn_layout_drawer4custom snippet"
  },
  "fgp_rn_layout_root": {
    "prefix": "fgp_rn_layout_root",
    "body": [
      "// ${TM_FILENAME_BASE}.tsx",
      "",
      "import { Slot, usePathname } from \"expo-router\";",
      "import { StatusBar } from \"react-native\";",
      "import { GestureHandlerRootView } from \"react-native-gesture-handler\";",
      "",
      "export default function RootLayout() {",
      "  const pathname = usePathname();",
      "  console.log(\"pathname:\", pathname);",
      "",
      "  return (",
      "    <GestureHandlerRootView style={{ flex: 1 }}>",
      "      {/* <Redirect href=\"/user\" /> */}",
      "      <StatusBar />",
      "      <Slot />",
      "    </GestureHandlerRootView>",
      "  );",
      "}"
    ],
    "description": "fgp_rn_layout_root snippet"
  },
  "fgp_rn_layout_slot": {
    "prefix": "fgp_rn_layout_slot",
    "body": [
      "import { Slot } from 'expo-router';",
      "",
      "export default function ${1:App}Layout() {",
      "  return <Slot />;",
      "}"
    ],
    "description": "fgp_rn_layout_slot snippet"
  },
  "fgp_rn_layout_stack": {
    "prefix": "fgp_rn_layout_stack",
    "body": [
      "// ${TM_FILENAME_BASE}.tsx",
      "",
      "import { Stack } from \"expo-router\";",
      "",
      "export default function $1Layout() {",
      "  return <Stack />;",
      "}"
    ],
    "description": "fgp_rn_layout_stack snippet"
  },
  "fgp_rn_layout_stack2": {
    "prefix": "fgp_rn_layout_stack2",
    "body": [
      "// ${TM_FILENAME_BASE}.tsx",
      "",
      "import { Stack } from \"expo-router\";",
      "",
      "export default function $1Layout() {",
      "  return (",
      "    <Stack",
      "      screenOptions={{",
      "        headerStyle: {",
      "          backgroundColor: \"#f4511e\",",
      "        },",
      "        headerTintColor: \"#fff\",",
      "        headerTitleStyle: {",
      "          fontWeight: \"bold\",",
      "        },",
      "      }}",
      "    >",
      "      <Stack.Screen name=\"index\" options={{ title: \"Home\" }} />",
      "",
      "      <Stack.Screen",
      "        name=\"products/[id]\"",
      "        // options={({ route }) => ({ title: \"products \" + (route.params as { id: string })?.id })}",
      "        options={{ animation: \"fade_from_bottom\" }}",
      "      />",
      "",
      "      <Stack.Screen name=\"products/[category]/[productId]\" options={{ title: \"Product Details\" }} />",
      "    </Stack>",
      "  );",
      "}"
    ],
    "description": "fgp_rn_layout_stack2 snippet"
  },
  "fgp_rn_layout_tabs": {
    "prefix": "fgp_rn_layout_tabs",
    "body": [
      "// ${TM_FILENAME_BASE}.tsx",
      "",
      "import FontAwesome from \"@expo/vector-icons/FontAwesome\";",
      "import { Tabs } from \"expo-router\";",
      "",
      "export default function ${1:${TM_FILENAME_BASE}}Layout() {",
      "  return <Tabs />;",
      "}"
    ],
    "description": "fgp_rn_layout_tabs snippet"
  },
  "fgp_rn_layout_tabs2": {
    "prefix": "fgp_rn_layout_tabs2",
    "body": [
      "// ${TM_FILENAME_BASE}.tsx",
      "",
      "import FontAwesome6 from \"@expo/vector-icons/FontAwesome\";",
      "import { Tabs } from \"expo-router\";",
      "",
      "export default function ${1:Tabs}Layout() {",
      "  return (",
      "    <Tabs screenOptions={{ tabBarActiveTintColor: \"teal\" }}",
      "      // controla qué pasa cuando el usuario presiona el botón de \"atrás\" en Android",
      "      backBehavior=\"order\">",
      "      <Tabs.Screen",
      "        name=\"index\"",
      "        options={{",
      "          title: \"Home Title\",",
      "          tabBarLabel: \"Home Tab Bar\",",
      "          tabBarIcon: ({ color, size }) => <FontAwesome6 size={size} name=\"home\" color={color} />,",
      "        }}",
      "      />",
      "      <Tabs.Screen",
      "        name=\"products\"",
      "        options={{",
      "          // href: null,",
      "          headerShown: false,",
      "          popToTopOnBlur: true,",
      "          tabBarIcon: ({ color, size }) => <FontAwesome6 size={size} name=\"shopping-basket\" color={color} />,",
      "        }}",
      "      />",
      "      <Tabs.Screen",
      "        name=\"user\"",
      "        options={{",
      "          tabBarBadge: 1,",
      "          tabBarBadgeStyle: { backgroundColor: \"red\", color: \"white\" },",
      "          tabBarIcon: ({ color, size }) => <FontAwesome6 size={size} name=\"user\" color={color} />,",
      "        }}",
      "      />",
      "    </Tabs>",
      "  );",
      "}"
    ],
    "description": "fgp_rn_layout_tabs2 snippet"
  },
  "fgp_rn_layout_tabs3custom": {
    "prefix": "fgp_rn_layout_tabs3custom",
    "body": [
      "// ${TM_FILENAME_BASE}.tsx",
      "",
      "import { FontAwesome6 } from \"@expo/vector-icons\";",
      "import { Tabs, useNavigation, usePathname, useRouter } from \"expo-router\";",
      "import React, { useLayoutEffect } from \"react\";",
      "import { Linking, StyleSheet, Text, TouchableOpacity, View } from \"react-native\";",
      "",
      "export default function TabsCustomLayout() {",
      "  const navigation = useNavigation();",
      "  const router = useRouter() as any;",
      "  const pathname = usePathname(); // Obtiene la ruta actual",
      "",
      "  const isAdmin = true;",
      "  // const showTabs = true;",
      "  const showTabs = !pathname.startsWith(\"/user/\");",
      "",
      "  useLayoutEffect(() => {",
      "    navigation.setOptions({",
      "      title: \"Users\",",
      "    });",
      "  }, [navigation]);",
      "",
      "  return (",
      "    <>",
      "      <Tabs screenOptions={{ tabBarStyle: { display: \"none\" }, headerShown: false }} />",
      "      {showTabs && (",
      "        <View style={styles.customTabBar}>",
      "          <CustomTabButton",
      "            title=\"Buscar\"",
      "            icon=\"magnifying-glass\"",
      "            onPress={() => router.push(\"/user\")}",
      "            iconColor={pathname === \"/user\" ? \"#b00\" : \"#64748b\"}",
      "          />",
      "          {isAdmin && (",
      "            <>",
      "              <CustomTabButton",
      "                title=\"Web\"",
      "                icon=\"globe\"",
      "                // onPress={() => router.push(\"/order/create\")}",
      "                onPress={() => Linking.openURL(`http://example.com`)}",
      "              />",
      "              <CustomTabButton",
      "                title=\"Profile\"",
      "                icon=\"user\"",
      "                iconColor={pathname === \"/user/profile\" ? \"#b00\" : \"#64748b\"}",
      "                onPress={() => router.push(\"/user/profile\")}",
      "                // onPress={() => Linking.openURL(`http://example.com`)}",
      "              />",
      "            </>",
      "          )}",
      "        </View>",
      "      )}",
      "    </>",
      "  );",
      "}",
      "",
      "const CustomTabButton = ({ title, icon, onPress, iconColor = \"#64748b\" }: any) => {",
      "  return (",
      "    <TouchableOpacity style={styles.button} onPress={onPress}>",
      "      <FontAwesome6 name={icon} size={24} color={iconColor} />",
      "      <Text style={{ ...styles.text, color: iconColor }}>{title}</Text>",
      "    </TouchableOpacity>",
      "  );",
      "};",
      "",
      "const styles = StyleSheet.create({",
      "  customTabBar: {",
      "    flexDirection: \"row\",",
      "    justifyContent: \"space-around\",",
      "    alignItems: \"center\",",
      "    height: 60,",
      "    position: \"absolute\",",
      "    bottom: 0,",
      "    left: 0,",
      "    right: 0,",
      "    borderTopColor: \"#e0e0e0\",",
      "    borderTopWidth: 1,",
      "    backgroundColor: \"#ffffff\",",
      "    gap: 10,",
      "  },",
      "  button: {",
      "    alignItems: \"center\",",
      "    paddingVertical: 5,",
      "    flex: 1,",
      "  },",
      "  text: {",
      "    color: \"#64748b\",",
      "    fontSize: 12,",
      "  },",
      "});"
    ],
    "description": "fgp_rn_layout_tabs3custom snippet"
  },
  "fgp_rn_layout_tabs4custom": {
    "prefix": "fgp_rn_layout_tabs4custom",
    "body": [
      "// ${TM_FILENAME_BASE}.tsx",
      "",
      "import { FontAwesome6 } from \"@expo/vector-icons\";",
      "import { BlurView } from \"expo-blur\";",
      "import { LinearGradient } from \"expo-linear-gradient\";",
      "import { Tabs, useNavigation, usePathname, useRouter } from \"expo-router\";",
      "import React, { useLayoutEffect } from \"react\";",
      "import { Animated, Linking, Platform, StyleSheet, Text, TouchableOpacity, View } from \"react-native\";",
      "",
      "interface TabItem {",
      "  id: string;",
      "  title: string;",
      "  icon: string;",
      "  route?: string;",
      "  url?: string;",
      "  color: string;",
      "  requiresAdmin?: boolean;",
      "}",
      "",
      "interface CustomTabButtonProps {",
      "  item: TabItem;",
      "  isActive: boolean;",
      "  onPress: () => void;",
      "}",
      "",
      "export default function ModernTabsLayout() {",
      "  const navigation = useNavigation();",
      "  const router = useRouter() as any;",
      "  const pathname = usePathname();",
      "",
      "  const isAdmin = true;",
      "  const showTabs = !pathname.startsWith(\"/user/\");",
      "",
      "  // Configuración de tabs más estructurada",
      "  const tabItems: TabItem[] = [",
      "    {",
      "      id: \"search\",",
      "      title: \"Buscar\",",
      "      icon: \"magnifying-glass\",",
      "      route: \"/tabs/search\",",
      "      color: \"#3b82f6\",",
      "    },",
      "    {",
      "      id: \"web\",",
      "      title: \"Web\",",
      "      icon: \"globe\",",
      "      url: \"http://example.com\",",
      "      color: \"#10b981\",",
      "      requiresAdmin: true,",
      "    },",
      "    {",
      "      id: \"profile\",",
      "      title: \"Profile\",",
      "      icon: \"user\",",
      "      route: \"/tabs/profile\",",
      "      color: \"#8b5cf6\",",
      "      requiresAdmin: true,",
      "    },",
      "  ];",
      "",
      "  // Filtrar tabs basado en permisos de admin",
      "  const visibleTabs = tabItems.filter((tab) => !tab.requiresAdmin || isAdmin);",
      "",
      "  useLayoutEffect(() => {",
      "    navigation.setOptions({",
      "      title: \"Users\",",
      "    });",
      "  }, [navigation]);",
      "",
      "  const handleTabPress = (item: TabItem) => {",
      "    if (item.url) {",
      "      Linking.openURL(item.url);",
      "    } else if (item.route) {",
      "      router.push(item.route);",
      "    }",
      "  };",
      "",
      "  const isTabActive = (item: TabItem): boolean => {",
      "    if (item.route) {",
      "      return pathname === item.route;",
      "    }",
      "    return false;",
      "  };",
      "",
      "  if (!showTabs) {",
      "    return <Tabs screenOptions={{ tabBarStyle: { display: \"none\" }, headerShown: false }} />;",
      "  }",
      "",
      "  return (",
      "    <>",
      "      <Tabs screenOptions={{ tabBarStyle: { display: \"none\" }, headerShown: false }} />",
      "",
      "      {/* Tab Bar con Blur Effect para iOS */}",
      "      <View style={styles.tabBarContainer}>",
      "        {Platform.OS === \"ios\" ? (",
      "          <BlurView intensity={95} style={styles.blurBackground}>",
      "            <View style={styles.tabBarContent}>",
      "              {visibleTabs.map((item) => (",
      "                <ModernTabButton",
      "                  key={item.id}",
      "                  item={item}",
      "                  isActive={isTabActive(item)}",
      "                  onPress={() => handleTabPress(item)}",
      "                />",
      "              ))}",
      "            </View>",
      "          </BlurView>",
      "        ) : (",
      "          <View style={[styles.tabBarContent, styles.androidBackground]}>",
      "            {visibleTabs.map((item) => (",
      "              <ModernTabButton",
      "                key={item.id}",
      "                item={item}",
      "                isActive={isTabActive(item)}",
      "                onPress={() => handleTabPress(item)}",
      "              />",
      "            ))}",
      "          </View>",
      "        )}",
      "",
      "        {/* Indicador de tab activo */}",
      "        <View style={styles.activeIndicator} />",
      "      </View>",
      "    </>",
      "  );",
      "}",
      "",
      "const ModernTabButton: React.FC<CustomTabButtonProps> = ({ item, isActive, onPress }) => {",
      "  return (",
      "    <TouchableOpacity",
      "      style={[styles.tabButton, isActive && styles.activeTabButton]}",
      "      onPress={onPress}",
      "      activeOpacity={0.7}",
      "    >",
      "      {isActive ? (",
      "        <LinearGradient colors={[item.color, `${item.color}88`]} style={styles.activeTabGradient}>",
      "          <View style={styles.tabContent}>",
      "            <View style={styles.iconContainer}>",
      "              <FontAwesome6 name={item.icon as any} size={20} color=\"#ffffff\" />",
      "            </View>",
      "            <Text style={styles.activeTabText}>{item.title}</Text>",
      "          </View>",
      "        </LinearGradient>",
      "      ) : (",
      "        <View style={styles.tabContent}>",
      "          <View style={styles.iconContainer}>",
      "            <FontAwesome6 name={item.icon as any} size={20} color=\"#64748b\" />",
      "          </View>",
      "          <Text style={styles.inactiveTabText}>{item.title}</Text>",
      "        </View>",
      "      )}",
      "",
      "      {/* Pequeño indicador para tabs externos */}",
      "      {item.url && (",
      "        <View style={styles.externalIndicator}>",
      "          <FontAwesome6 name=\"up-right-from-square\" size={8} color=\"#94a3b8\" />",
      "        </View>",
      "      )}",
      "    </TouchableOpacity>",
      "  );",
      "};",
      "",
      "const styles = StyleSheet.create({",
      "  tabBarContainer: {",
      "    position: \"absolute\",",
      "    bottom: 0,",
      "    left: 0,",
      "    right: 0,",
      "    paddingBottom: Platform.OS === \"ios\" ? 34 : 10, // Safe area para iPhone",
      "  },",
      "  blurBackground: {",
      "    borderTopLeftRadius: 24,",
      "    borderTopRightRadius: 24,",
      "    overflow: \"hidden\",",
      "    borderTopWidth: 1,",
      "    borderTopColor: \"rgba(255, 255, 255, 0.2)\",",
      "  },",
      "  androidBackground: {",
      "    backgroundColor: \"#ffffff\",",
      "    borderTopLeftRadius: 24,",
      "    borderTopRightRadius: 24,",
      "    borderTopWidth: 1,",
      "    borderTopColor: \"#f1f5f9\",",
      "    shadowColor: \"#000\",",
      "    shadowOffset: {",
      "      width: 0,",
      "      height: -2,",
      "    },",
      "    shadowOpacity: 0.1,",
      "    shadowRadius: 12,",
      "    elevation: 12,",
      "  },",
      "  tabBarContent: {",
      "    flexDirection: \"row\",",
      "    justifyContent: \"space-around\",",
      "    alignItems: \"center\",",
      "    paddingTop: 16,",
      "    paddingBottom: 12,",
      "    paddingHorizontal: 16,",
      "  },",
      "  tabButton: {",
      "    alignItems: \"center\",",
      "    justifyContent: \"center\",",
      "    flex: 1,",
      "    paddingVertical: 8,",
      "    paddingHorizontal: 12,",
      "    borderRadius: 16,",
      "    position: \"relative\",",
      "    minHeight: 56,",
      "  },",
      "  activeTabButton: {",
      "    transform: [{ scale: 1.05 }],",
      "  },",
      "  activeTabGradient: {",
      "    borderRadius: 16,",
      "    paddingVertical: 8,",
      "    paddingHorizontal: 12,",
      "    shadowColor: \"#000\",",
      "    shadowOffset: {",
      "      width: 0,",
      "      height: 4,",
      "    },",
      "    shadowOpacity: 0.2,",
      "    shadowRadius: 8,",
      "    elevation: 8,",
      "    width: \"100%\",",
      "    alignItems: \"center\",",
      "  },",
      "  tabContent: {",
      "    alignItems: \"center\",",
      "    justifyContent: \"center\",",
      "  },",
      "  iconContainer: {",
      "    marginBottom: 4,",
      "  },",
      "  activeTabText: {",
      "    color: \"#ffffff\",",
      "    fontSize: 12,",
      "    fontWeight: \"600\",",
      "    textAlign: \"center\",",
      "  },",
      "  inactiveTabText: {",
      "    color: \"#64748b\",",
      "    fontSize: 12,",
      "    fontWeight: \"500\",",
      "    textAlign: \"center\",",
      "  },",
      "  activeIndicator: {",
      "    position: \"absolute\",",
      "    bottom: Platform.OS === \"ios\" ? 38 : 14,",
      "    left: \"50%\",",
      "    width: 32,",
      "    height: 4,",
      "    backgroundColor: \"#e2e8f0\",",
      "    borderRadius: 2,",
      "    marginLeft: -16,",
      "  },",
      "  externalIndicator: {",
      "    position: \"absolute\",",
      "    top: 4,",
      "    right: 8,",
      "    width: 12,",
      "    height: 12,",
      "    backgroundColor: \"rgba(148, 163, 184, 0.2)\",",
      "    borderRadius: 6,",
      "    alignItems: \"center\",",
      "    justifyContent: \"center\",",
      "  },",
      "});",
      "",
      "// Componente adicional para animaciones más avanzadas (opcional)",
      "export const AnimatedTabIndicator = ({ activeIndex, tabWidth }: { activeIndex: number; tabWidth: number }) => {",
      "  const translateX = new Animated.Value(0);",
      "",
      "  React.useEffect(() => {",
      "    Animated.spring(translateX, {",
      "      toValue: activeIndex * tabWidth,",
      "      useNativeDriver: true,",
      "      tension: 100,",
      "      friction: 8,",
      "    }).start();",
      "  }, [activeIndex, tabWidth]);",
      "",
      "  return (",
      "    <Animated.View",
      "      style={[",
      "        animatedStyles.animatedIndicator,",
      "        {",
      "          transform: [{ translateX }],",
      "          width: tabWidth - 32,",
      "        },",
      "      ]}",
      "    />",
      "  );",
      "};",
      "",
      "const animatedStyles = StyleSheet.create({",
      "  animatedIndicator: {",
      "    position: \"absolute\",",
      "    bottom: 8,",
      "    height: 3,",
      "    backgroundColor: \"#3b82f6\",",
      "    borderRadius: 2,",
      "    marginHorizontal: 16,",
      "  },",
      "});"
    ],
    "description": "fgp_rn_layout_tabs4custom snippet"
  },
  "fgp_rn_layout_tabs5custom": {
    "prefix": "fgp_rn_layout_tabs5custom",
    "body": [
      "import { FontAwesome6 } from \"@expo/vector-icons\";",
      "import { BlurView } from \"expo-blur\";",
      "import { LinearGradient } from \"expo-linear-gradient\";",
      "import { Tabs, useNavigation, usePathname, useRouter } from \"expo-router\";",
      "import React, { useEffect, useLayoutEffect, useRef } from \"react\";",
      "import { Animated, Dimensions, Linking, Platform, StyleSheet, Text, TouchableOpacity, View } from \"react-native\";",
      "",
      "interface TabItem {",
      "  id: string;",
      "  title: string;",
      "  icon: string;",
      "  route?: string;",
      "  url?: string;",
      "  color: string;",
      "  requiresAdmin?: boolean;",
      "}",
      "",
      "interface CustomTabButtonProps {",
      "  item: TabItem;",
      "  isActive: boolean;",
      "  onPress: () => void;",
      "  index: number;",
      "}",
      "",
      "const { width: screenWidth } = Dimensions.get('window');",
      "",
      "export default function ModernTabsLayout() {",
      "  const navigation = useNavigation();",
      "  const router = useRouter() as any;",
      "  const pathname = usePathname();",
      "",
      "  const isAdmin = true;",
      "  const showTabs = !pathname.startsWith(\"/user/\");",
      "",
      "  // Configuración de tabs más estructurada",
      "  const tabItems: TabItem[] = [",
      "    {",
      "      id: \"search\",",
      "      title: \"Buscar\",",
      "      icon: \"magnifying-glass\",",
      "      route: \"/tabs/search\",",
      "      color: \"#3b82f6\",",
      "    },",
      "    {",
      "      id: \"web\",",
      "      title: \"Web\",",
      "      icon: \"globe\",",
      "      url: \"http://example.com\",",
      "      color: \"#10b981\",",
      "      requiresAdmin: true,",
      "    },",
      "    {",
      "      id: \"profile\",",
      "      title: \"Profile\",",
      "      icon: \"user\",",
      "      route: \"/tabs/profile\",",
      "      color: \"#8b5cf6\",",
      "      requiresAdmin: true,",
      "    },",
      "  ];",
      "",
      "  // Filtrar tabs basado en permisos de admin",
      "  const visibleTabs = tabItems.filter((tab) => !tab.requiresAdmin || isAdmin);",
      "  ",
      "  // Calcular ancho de cada tab",
      "  const tabWidth = (screenWidth - 32) / visibleTabs.length; // 32 = padding horizontal total",
      "",
      "  // Encontrar índice del tab activo",
      "  const activeIndex = visibleTabs.findIndex(tab => tab.route === pathname);",
      "",
      "  // Animación para el tab bar (entrada desde abajo)",
      "  const tabBarAnimation = useRef(new Animated.Value(100)).current;",
      "",
      "  useLayoutEffect(() => {",
      "    navigation.setOptions({",
      "      title: \"Users\",",
      "    });",
      "  }, [navigation]);",
      "",
      "  // Animar entrada del tab bar",
      "  useEffect(() => {",
      "    if (showTabs) {",
      "      Animated.spring(tabBarAnimation, {",
      "        toValue: 0,",
      "        useNativeDriver: true,",
      "        tension: 100,",
      "        friction: 8,",
      "      }).start();",
      "    } else {",
      "      Animated.timing(tabBarAnimation, {",
      "        toValue: 100,",
      "        duration: 200,",
      "        useNativeDriver: true,",
      "      }).start();",
      "    }",
      "  }, [showTabs]);",
      "",
      "  const handleTabPress = (item: TabItem) => {",
      "    if (item.url) {",
      "      Linking.openURL(item.url);",
      "    } else if (item.route) {",
      "      router.push(item.route);",
      "    }",
      "  };",
      "",
      "  const isTabActive = (item: TabItem): boolean => {",
      "    if (item.route) {",
      "      return pathname === item.route;",
      "    }",
      "    return false;",
      "  };",
      "",
      "  if (!showTabs) {",
      "    return <Tabs screenOptions={{ tabBarStyle: { display: \"none\" }, headerShown: false }} />;",
      "  }",
      "",
      "  return (",
      "    <>",
      "      <Tabs screenOptions={{ tabBarStyle: { display: \"none\" }, headerShown: false }} />",
      "",
      "      {/* Tab Bar con animación */}",
      "      <Animated.View ",
      "        style={[",
      "          styles.tabBarContainer,",
      "          {",
      "            transform: [{ translateY: tabBarAnimation }]",
      "          }",
      "        ]}",
      "      >",
      "        {Platform.OS === \"ios\" ? (",
      "          <BlurView intensity={95} style={styles.blurBackground}>",
      "            <View style={styles.tabBarContent}>",
      "              {visibleTabs.map((item, index) => (",
      "                <ModernTabButton",
      "                  key={item.id}",
      "                  item={item}",
      "                  index={index}",
      "                  isActive={isTabActive(item)}",
      "                  onPress={() => handleTabPress(item)}",
      "                />",
      "              ))}",
      "            </View>",
      "            {/* Indicador animado para iOS */}",
      "            <AnimatedTabIndicator ",
      "              activeIndex={activeIndex} ",
      "              tabWidth={tabWidth}",
      "              visibleTabs={visibleTabs}",
      "            />",
      "          </BlurView>",
      "        ) : (",
      "          <View style={[styles.tabBarContent, styles.androidBackground]}>",
      "            {visibleTabs.map((item, index) => (",
      "              <ModernTabButton",
      "                key={item.id}",
      "                item={item}",
      "                index={index}",
      "                isActive={isTabActive(item)}",
      "                onPress={() => handleTabPress(item)}",
      "              />",
      "            ))}",
      "            {/* Indicador animado para Android */}",
      "            <AnimatedTabIndicator ",
      "              activeIndex={activeIndex} ",
      "              tabWidth={tabWidth}",
      "              visibleTabs={visibleTabs}",
      "            />",
      "          </View>",
      "        )}",
      "      </Animated.View>",
      "    </>",
      "  );",
      "}",
      "",
      "const ModernTabButton: React.FC<CustomTabButtonProps> = ({ item, isActive, onPress, index }) => {",
      "  // Animaciones para el botón",
      "  const scaleAnim = useRef(new Animated.Value(1)).current;",
      "  const fadeAnim = useRef(new Animated.Value(0.7)).current;",
      "  const bounceAnim = useRef(new Animated.Value(0)).current;",
      "",
      "  useEffect(() => {",
      "    if (isActive) {",
      "      // Animación de activación",
      "      Animated.parallel([",
      "        Animated.spring(scaleAnim, {",
      "          toValue: 1.1,",
      "          useNativeDriver: true,",
      "          tension: 150,",
      "          friction: 4,",
      "        }),",
      "        Animated.timing(fadeAnim, {",
      "          toValue: 1,",
      "          duration: 200,",
      "          useNativeDriver: true,",
      "        }),",
      "        Animated.sequence([",
      "          Animated.timing(bounceAnim, {",
      "            toValue: -8,",
      "            duration: 150,",
      "            useNativeDriver: true,",
      "          }),",
      "          Animated.spring(bounceAnim, {",
      "            toValue: 0,",
      "            useNativeDriver: true,",
      "            tension: 200,",
      "            friction: 6,",
      "          })",
      "        ])",
      "      ]).start();",
      "    } else {",
      "      // Animación de desactivación",
      "      Animated.parallel([",
      "        Animated.spring(scaleAnim, {",
      "          toValue: 1,",
      "          useNativeDriver: true,",
      "          tension: 150,",
      "          friction: 4,",
      "        }),",
      "        Animated.timing(fadeAnim, {",
      "          toValue: 0.7,",
      "          duration: 200,",
      "          useNativeDriver: true,",
      "        }),",
      "        Animated.timing(bounceAnim, {",
      "          toValue: 0,",
      "          duration: 150,",
      "          useNativeDriver: true,",
      "        })",
      "      ]).start();",
      "    }",
      "  }, [isActive]);",
      "",
      "  const handlePress = () => {",
      "    // Animación de toque",
      "    Animated.sequence([",
      "      Animated.timing(scaleAnim, {",
      "        toValue: 0.95,",
      "        duration: 100,",
      "        useNativeDriver: true,",
      "      }),",
      "      Animated.spring(scaleAnim, {",
      "        toValue: isActive ? 1.1 : 1,",
      "        useNativeDriver: true,",
      "        tension: 150,",
      "        friction: 4,",
      "      })",
      "    ]).start();",
      "",
      "    onPress();",
      "  };",
      "",
      "  return (",
      "    <TouchableOpacity",
      "      style={styles.tabButton}",
      "      onPress={handlePress}",
      "      activeOpacity={1} // Usamos animación personalizada",
      "    >",
      "      <Animated.View",
      "        style={[",
      "          styles.tabButtonContent,",
      "          {",
      "            transform: [",
      "              { scale: scaleAnim },",
      "              { translateY: bounceAnim }",
      "            ],",
      "            opacity: fadeAnim,",
      "          }",
      "        ]}",
      "      >",
      "        {isActive ? (",
      "          <LinearGradient ",
      "            colors={[item.color, `${item.color}88`]} ",
      "            style={styles.activeTabGradient}",
      "          >",
      "            <View style={styles.tabContent}>",
      "              <Animated.View style={[styles.iconContainer, styles.activeIconContainer]}>",
      "                <FontAwesome6 name={item.icon as any} size={20} color=\"#ffffff\" />",
      "              </Animated.View>",
      "              <Text style={styles.activeTabText}>{item.title}</Text>",
      "            </View>",
      "          </LinearGradient>",
      "        ) : (",
      "          <View style={styles.tabContent}>",
      "            <View style={styles.iconContainer}>",
      "              <FontAwesome6 name={item.icon as any} size={20} color=\"#64748b\" />",
      "            </View>",
      "            <Text style={styles.inactiveTabText}>{item.title}</Text>",
      "          </View>",
      "        )}",
      "",
      "        {/* Pequeño indicador para tabs externos */}",
      "        {item.url && (",
      "          <Animated.View style={[styles.externalIndicator, { opacity: fadeAnim }]}>",
      "            <FontAwesome6 name=\"up-right-from-square\" size={8} color=\"#94a3b8\" />",
      "          </Animated.View>",
      "        )}",
      "      </Animated.View>",
      "    </TouchableOpacity>",
      "  );",
      "};",
      "",
      "// Componente del indicador animado",
      "const AnimatedTabIndicator = ({ ",
      "  activeIndex, ",
      "  tabWidth, ",
      "  visibleTabs ",
      "}: { ",
      "  activeIndex: number; ",
      "  tabWidth: number;",
      "  visibleTabs: TabItem[];",
      "}) => {",
      "  const translateX = useRef(new Animated.Value(0)).current;",
      "  const scaleX = useRef(new Animated.Value(1)).current;",
      "  const opacity = useRef(new Animated.Value(0)).current;",
      "",
      "  useEffect(() => {",
      "    if (activeIndex >= 0) {",
      "      // Mostrar indicador",
      "      Animated.timing(opacity, {",
      "        toValue: 1,",
      "        duration: 200,",
      "        useNativeDriver: true,",
      "      }).start();",
      "",
      "      // Animación de movimiento",
      "      Animated.parallel([",
      "        Animated.spring(translateX, {",
      "          toValue: activeIndex * tabWidth + 16, // 16 = margin inicial",
      "          useNativeDriver: true,",
      "          tension: 120,",
      "          friction: 8,",
      "        }),",
      "        // Efecto de \"squeeze\" en la transición",
      "        Animated.sequence([",
      "          Animated.timing(scaleX, {",
      "            toValue: 0.8,",
      "            duration: 100,",
      "            useNativeDriver: true,",
      "          }),",
      "          Animated.spring(scaleX, {",
      "            toValue: 1,",
      "            useNativeDriver: true,",
      "            tension: 200,",
      "            friction: 6,",
      "          })",
      "        ])",
      "      ]).start();",
      "    } else {",
      "      // Ocultar indicador",
      "      Animated.timing(opacity, {",
      "        toValue: 0,",
      "        duration: 200,",
      "        useNativeDriver: true,",
      "      }).start();",
      "    }",
      "  }, [activeIndex, tabWidth]);",
      "",
      "  if (activeIndex < 0) return null;",
      "",
      "  const activeTab = visibleTabs[activeIndex];",
      "  ",
      "  return (",
      "    <Animated.View",
      "      style={[",
      "        styles.animatedIndicator,",
      "        {",
      "          transform: [",
      "            { translateX },",
      "            { scaleX }",
      "          ],",
      "          opacity,",
      "          width: tabWidth - 32,",
      "          backgroundColor: activeTab?.color || '#3b82f6',",
      "        },",
      "      ]}",
      "    />",
      "  );",
      "};",
      "",
      "const styles = StyleSheet.create({",
      "  tabBarContainer: {",
      "    position: \"absolute\",",
      "    bottom: 0,",
      "    left: 0,",
      "    right: 0,",
      "    paddingBottom: Platform.OS === \"ios\" ? 34 : 10,",
      "  },",
      "  blurBackground: {",
      "    borderTopLeftRadius: 24,",
      "    borderTopRightRadius: 24,",
      "    overflow: \"hidden\",",
      "    borderTopWidth: 1,",
      "    borderTopColor: \"rgba(255, 255, 255, 0.2)\",",
      "  },",
      "  androidBackground: {",
      "    backgroundColor: \"#ffffff\",",
      "    borderTopLeftRadius: 24,",
      "    borderTopRightRadius: 24,",
      "    borderTopWidth: 1,",
      "    borderTopColor: \"#f1f5f9\",",
      "    shadowColor: \"#000\",",
      "    shadowOffset: {",
      "      width: 0,",
      "      height: -2,",
      "    },",
      "    shadowOpacity: 0.1,",
      "    shadowRadius: 12,",
      "    elevation: 12,",
      "    position: \"relative\",",
      "  },",
      "  tabBarContent: {",
      "    flexDirection: \"row\",",
      "    justifyContent: \"space-around\",",
      "    alignItems: \"center\",",
      "    paddingTop: 16,",
      "    paddingBottom: 12,",
      "    paddingHorizontal: 16,",
      "  },",
      "  tabButton: {",
      "    alignItems: \"center\",",
      "    justifyContent: \"center\",",
      "    flex: 1,",
      "    minHeight: 56,",
      "  },",
      "  tabButtonContent: {",
      "    alignItems: \"center\",",
      "    justifyContent: \"center\",",
      "    paddingVertical: 8,",
      "    paddingHorizontal: 12,",
      "    borderRadius: 16,",
      "    position: \"relative\",",
      "    width: \"100%\",",
      "  },",
      "  activeTabGradient: {",
      "    borderRadius: 16,",
      "    paddingVertical: 8,",
      "    paddingHorizontal: 12,",
      "    shadowColor: \"#000\",",
      "    shadowOffset: {",
      "      width: 0,",
      "      height: 4,",
      "    },",
      "    shadowOpacity: 0.3,",
      "    shadowRadius: 8,",
      "    elevation: 8,",
      "    width: \"100%\",",
      "    alignItems: \"center\",",
      "  },",
      "  tabContent: {",
      "    alignItems: \"center\",",
      "    justifyContent: \"center\",",
      "  },",
      "  iconContainer: {",
      "    marginBottom: 4,",
      "  },",
      "  activeIconContainer: {",
      "    shadowColor: \"#ffffff\",",
      "    shadowOffset: {",
      "      width: 0,",
      "      height: 2,",
      "    },",
      "    shadowOpacity: 0.3,",
      "    shadowRadius: 4,",
      "  },",
      "  activeTabText: {",
      "    color: \"#ffffff\",",
      "    fontSize: 12,",
      "    fontWeight: \"600\",",
      "    textAlign: \"center\",",
      "    textShadowColor: \"rgba(0, 0, 0, 0.2)\",",
      "    textShadowOffset: { width: 0, height: 1 },",
      "    textShadowRadius: 2,",
      "  },",
      "  inactiveTabText: {",
      "    color: \"#64748b\",",
      "    fontSize: 12,",
      "    fontWeight: \"500\",",
      "    textAlign: \"center\",",
      "  },",
      "  externalIndicator: {",
      "    position: \"absolute\",",
      "    top: 4,",
      "    right: 8,",
      "    width: 12,",
      "    height: 12,",
      "    backgroundColor: \"rgba(148, 163, 184, 0.2)\",",
      "    borderRadius: 6,",
      "    alignItems: \"center\",",
      "    justifyContent: \"center\",",
      "  },",
      "  animatedIndicator: {",
      "    position: \"absolute\",",
      "    bottom: Platform.OS === \"ios\" ? 8 : 8,",
      "    height: 3,",
      "    borderRadius: 2,",
      "    marginHorizontal: 16,",
      "  },",
      "});"
    ],
    "description": "fgp_rn_layout_tabs5custom snippet"
  },
  "fgp_rn_login_screen": {
    "prefix": "fgp_rn_login_screen",
    "body": [
      "import React, { useState } from \"react\";",
      "import {",
      "  View,",
      "  Text,",
      "  TextInput,",
      "  TouchableOpacity,",
      "  StyleSheet,",
      "  Alert,",
      "  KeyboardAvoidingView,",
      "  Platform,",
      "  ScrollView,",
      "  ActivityIndicator,",
      "} from \"react-native\";",
      "import { StatusBar } from \"expo-status-bar\";",
      "import { Ionicons } from \"@expo/vector-icons\";",
      "",
      "interface LoginProps {",
      "  onLogin?: (email: string, password: string) => Promise<void>;",
      "  onForgotPassword?: () => void;",
      "  onSignUp?: () => void;",
      "}",
      "",
      "const Login: React.FC<LoginProps> = ({ onLogin, onForgotPassword, onSignUp }) => {",
      "  const [email, setEmail] = useState(\"\");",
      "  const [password, setPassword] = useState(\"\");",
      "  const [showPassword, setShowPassword] = useState(false);",
      "  const [isLoading, setIsLoading] = useState(false);",
      "",
      "  const validateEmail = (email: string): boolean => {",
      "    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;",
      "    return emailRegex.test(email);",
      "  };",
      "",
      "  const handleLogin = async () => {",
      "    // Validaciones básicas",
      "    if (!email.trim()) {",
      "      Alert.alert(\"Error\", \"Por favor ingresa tu email\");",
      "      return;",
      "    }",
      "",
      "    if (!validateEmail(email)) {",
      "      Alert.alert(\"Error\", \"Por favor ingresa un email válido\");",
      "      return;",
      "    }",
      "",
      "    if (!password.trim()) {",
      "      Alert.alert(\"Error\", \"Por favor ingresa tu contraseña\");",
      "      return;",
      "    }",
      "",
      "    if (password.length < 6) {",
      "      Alert.alert(\"Error\", \"La contraseña debe tener al menos 6 caracteres\");",
      "      return;",
      "    }",
      "",
      "    setIsLoading(true);",
      "",
      "    try {",
      "      if (onLogin) {",
      "        await onLogin(email, password);",
      "      } else {",
      "        // Simulación de login por defecto",
      "        await new Promise((resolve) => setTimeout(resolve, 2000));",
      "        Alert.alert(\"Éxito\", \"Inicio de sesión exitoso\");",
      "      }",
      "    } catch (error) {",
      "      Alert.alert(\"Error\", \"Credenciales incorrectas\");",
      "    } finally {",
      "      setIsLoading(false);",
      "    }",
      "  };",
      "",
      "  return (",
      "    <KeyboardAvoidingView style={styles.container} behavior={Platform.OS === \"ios\" ? \"padding\" : \"height\"}>",
      "      <StatusBar style=\"dark\" />",
      "      <ScrollView contentContainerStyle={styles.scrollContainer} showsVerticalScrollIndicator={false}>",
      "        <View style={styles.header}>",
      "          <Text style={styles.title}>Bienvenido</Text>",
      "          <Text style={styles.subtitle}>Inicia sesión en tu cuenta</Text>",
      "        </View>",
      "",
      "        <View style={styles.form}>",
      "          {/* Campo Email */}",
      "          <View style={styles.inputContainer}>",
      "            <Text style={styles.label}>Email</Text>",
      "            <View style={styles.inputWrapper}>",
      "              <Ionicons name=\"mail-outline\" size={20} color=\"#9CA3AF\" style={styles.inputIcon} />",
      "              <TextInput",
      "                style={styles.input}",
      "                placeholder=\"tu@email.com\"",
      "                placeholderTextColor=\"#9CA3AF\"",
      "                value={email}",
      "                onChangeText={setEmail}",
      "                keyboardType=\"email-address\"",
      "                autoCapitalize=\"none\"",
      "                autoComplete=\"email\"",
      "              />",
      "            </View>",
      "          </View>",
      "",
      "          {/* Campo Contraseña */}",
      "          <View style={styles.inputContainer}>",
      "            <Text style={styles.label}>Contraseña</Text>",
      "            <View style={styles.inputWrapper}>",
      "              <Ionicons name=\"lock-closed-outline\" size={20} color=\"#9CA3AF\" style={styles.inputIcon} />",
      "              <TextInput",
      "                style={[styles.input, styles.passwordInput]}",
      "                placeholder=\"••••••••\"",
      "                placeholderTextColor=\"#9CA3AF\"",
      "                value={password}",
      "                onChangeText={setPassword}",
      "                secureTextEntry={!showPassword}",
      "                autoComplete=\"password\"",
      "              />",
      "              <TouchableOpacity style={styles.eyeIcon} onPress={() => setShowPassword(!showPassword)}>",
      "                <Ionicons name={showPassword ? \"eye-off-outline\" : \"eye-outline\"} size={20} color=\"#9CA3AF\" />",
      "              </TouchableOpacity>",
      "            </View>",
      "          </View>",
      "",
      "          {/* Olvidaste tu contraseña */}",
      "          <TouchableOpacity style={styles.forgotPassword} onPress={onForgotPassword}>",
      "            <Text style={styles.forgotPasswordText}>¿Olvidaste tu contraseña?</Text>",
      "          </TouchableOpacity>",
      "",
      "          {/* Botón de Login */}",
      "          <TouchableOpacity",
      "            style={[styles.loginButton, isLoading && styles.loginButtonDisabled]}",
      "            onPress={handleLogin}",
      "            disabled={isLoading}",
      "          >",
      "            {isLoading ? (",
      "              <ActivityIndicator color=\"#FFFFFF\" size=\"small\" />",
      "            ) : (",
      "              <Text style={styles.loginButtonText}>Iniciar Sesión</Text>",
      "            )}",
      "          </TouchableOpacity>",
      "",
      "          {/* Divider */}",
      "          <View style={styles.divider}>",
      "            <View style={styles.dividerLine} />",
      "            <Text style={styles.dividerText}>o</Text>",
      "            <View style={styles.dividerLine} />",
      "          </View>",
      "",
      "          {/* Botón de Registro */}",
      "          <TouchableOpacity style={styles.signUpButton} onPress={onSignUp} disabled={isLoading}>",
      "            <Text style={styles.signUpButtonText}>¿No tienes cuenta? Regístrate</Text>",
      "          </TouchableOpacity>",
      "        </View>",
      "      </ScrollView>",
      "    </KeyboardAvoidingView>",
      "  );",
      "};",
      "",
      "const styles = StyleSheet.create({",
      "  container: {",
      "    flex: 1,",
      "    backgroundColor: \"#FFFFFF\",",
      "  },",
      "  scrollContainer: {",
      "    flexGrow: 1,",
      "    justifyContent: \"center\",",
      "    padding: 24,",
      "  },",
      "  header: {",
      "    alignItems: \"center\",",
      "    marginBottom: 40,",
      "  },",
      "  title: {",
      "    fontSize: 32,",
      "    fontWeight: \"bold\",",
      "    color: \"#111827\",",
      "    marginBottom: 8,",
      "  },",
      "  subtitle: {",
      "    fontSize: 16,",
      "    color: \"#6B7280\",",
      "    textAlign: \"center\",",
      "  },",
      "  form: {",
      "    width: \"100%\",",
      "  },",
      "  inputContainer: {",
      "    marginBottom: 20,",
      "  },",
      "  label: {",
      "    fontSize: 16,",
      "    fontWeight: \"600\",",
      "    color: \"#374151\",",
      "    marginBottom: 8,",
      "  },",
      "  inputWrapper: {",
      "    flexDirection: \"row\",",
      "    alignItems: \"center\",",
      "    backgroundColor: \"#F9FAFB\",",
      "    borderRadius: 12,",
      "    borderWidth: 1,",
      "    borderColor: \"#E5E7EB\",",
      "    paddingHorizontal: 16,",
      "    height: 52,",
      "  },",
      "  inputIcon: {",
      "    marginRight: 12,",
      "  },",
      "  input: {",
      "    flex: 1,",
      "    fontSize: 16,",
      "    color: \"#111827\",",
      "    height: \"100%\",",
      "  },",
      "  passwordInput: {",
      "    paddingRight: 40,",
      "  },",
      "  eyeIcon: {",
      "    position: \"absolute\",",
      "    right: 16,",
      "    height: \"100%\",",
      "    justifyContent: \"center\",",
      "    alignItems: \"center\",",
      "    width: 24,",
      "  },",
      "  forgotPassword: {",
      "    alignSelf: \"flex-end\",",
      "    marginBottom: 24,",
      "  },",
      "  forgotPasswordText: {",
      "    fontSize: 14,",
      "    color: \"#3B82F6\",",
      "    fontWeight: \"500\",",
      "  },",
      "  loginButton: {",
      "    backgroundColor: \"#3B82F6\",",
      "    borderRadius: 12,",
      "    height: 52,",
      "    justifyContent: \"center\",",
      "    alignItems: \"center\",",
      "    marginBottom: 24,",
      "    shadowColor: \"#3B82F6\",",
      "    shadowOffset: {",
      "      width: 0,",
      "      height: 2,",
      "    },",
      "    shadowOpacity: 0.2,",
      "    shadowRadius: 4,",
      "    elevation: 3,",
      "  },",
      "  loginButtonDisabled: {",
      "    backgroundColor: \"#9CA3AF\",",
      "    shadowOpacity: 0,",
      "    elevation: 0,",
      "  },",
      "  loginButtonText: {",
      "    color: \"#FFFFFF\",",
      "    fontSize: 16,",
      "    fontWeight: \"600\",",
      "  },",
      "  divider: {",
      "    flexDirection: \"row\",",
      "    alignItems: \"center\",",
      "    marginBottom: 24,",
      "  },",
      "  dividerLine: {",
      "    flex: 1,",
      "    height: 1,",
      "    backgroundColor: \"#E5E7EB\",",
      "  },",
      "  dividerText: {",
      "    marginHorizontal: 16,",
      "    fontSize: 14,",
      "    color: \"#9CA3AF\",",
      "  },",
      "  signUpButton: {",
      "    alignItems: \"center\",",
      "    paddingVertical: 12,",
      "  },",
      "  signUpButtonText: {",
      "    fontSize: 16,",
      "    color: \"#3B82F6\",",
      "    fontWeight: \"500\",",
      "  },",
      "});",
      "",
      "export default Login;"
    ],
    "description": "fgp_rn_login_screen snippet"
  },
  "fgp_rn_navigate": {
    "prefix": "fgp_rn_navigate",
    "body": [
      "<Link href=\"/screen\" push>Go to screen</Link>",
      "<Link href=\"./folder\" push asChild><Button title=\"Go to folder\" /></Link>",
      "<Link href=\"/pressable\" push asChild><Pressable><Text>Go to pressable</Text></Pressable></Link>",
      "<Button title=\"Button\" onPress={() => route.push(\"/screen\")} />",
      "",
      "{/* npx expo-router-sitemap */}"
    ],
    "description": "fgp_rn_navigate snippet"
  },
  "fgp_rn_navigate_link_button": {
    "prefix": "fgp_rn_navigate_link_button",
    "body": [
      "<Link href=\"./folder\" push asChild><Button title=\"Go to folder\" /></Link>"
    ],
    "description": "fgp_rn_navigate_link_button snippet"
  },
  "fgp_rn_navigate_screen": {
    "prefix": "fgp_rn_navigate_screen",
    "body": [
      "import { Link, useRouter } from \"expo-router\";",
      "import { Button, Pressable, Text, View } from \"react-native\";",
      "",
      "export default function Navigations() {",
      "  const route = useRouter();",
      "  return (",
      "    <View",
      "      style={{",
      "        flex: 1,",
      "        justifyContent: \"center\",",
      "        alignItems: \"center\",",
      "      }}",
      "    >",
      "      <Text>Navigation</Text>",
      "",
      "      <Link href=\"/products\" push>Go to products tabs</Link>",
      "",
      "      <Link href=\"/second\" push>Go to Second</Link>",
      "",
      "      <Button title=\"Go to Second\" onPress={() => route.push(\"/second\")} />",
      "",
      "      <Link href=\"/demo\" push asChild><Button title=\"Go to demo\" /></Link>",
      "",
      "      <Link href=\"./redirect\" push asChild><Button title=\"Go to redirect\" /></Link>",
      "",
      "      <Link href=\"/second\" push asChild><Pressable><Text>Go to Second</Text></Pressable></Link>",
      "",
      "      <Link ",
      "        href={{",
      "          pathname: \"/params\",",
      "          params: { name: \"Kadi\" },",
      "        }}",
      "        push asChild>",
      "        <Button title=\"Go to params Kadi\" />",
      "      </Link>",
      "",
      "      <Button",
      "        title=\"Go to params Mary\"",
      "        onPress={() => route.push({",
      "          pathname: \"/params\",",
      "          params: { name: \"Mary\" },",
      "        })}",
      "      />",
      "",
      "      <Link href=\"./proverbs/1\" push asChild><Button title=\"Go to proverbs/1\" /></Link>",
      "",
      "      <Link ",
      "        href={{",
      "          pathname: \"/proverbs/[id]\",",
      "          params: { id: \"321\" },",
      "        }}",
      "        push asChild>",
      "        <Button title=\"Go to /proverbs/[id]\" />",
      "      </Link>",
      "",
      "      <Link href=\"./products/electronics/123\" push asChild><Button title=\"Go to products/electronics/123\" /></Link>",
      "      <Link href=\"./products/clothing/456\" push asChild><Button title=\"Go to products/clothing/456\" /></Link>",
      "    </View>",
      "  );",
      "}",
      "",
      "/* ",
      "",
      "npx expo-router-sitemap",
      "",
      "*/"
    ],
    "description": "fgp_rn_navigate_screen snippet"
  },
  "fgp_rn_params": {
    "prefix": "fgp_rn_params",
    "body": [
      "// ${TM_FILENAME_BASE}.tsx",
      "",
      "import { Stack, useLocalSearchParams } from \"expo-router\";",
      "import { StyleSheet, Text, View } from \"react-native\";",
      "",
      "export default function ${1:${TM_FILENAME_BASE}}Params() {",
      "  const { ${2:id} } = useLocalSearchParams();",
      "  // const params = useLocalSearchParams<{ ${2:id}: string }>();",
      "",
      "  return (",
      "    <View style={styles.container}>",
      "       <Stack.Screen name=\"${3:${1:${TM_FILENAME_BASE}}}/[${2:id}]\" options={{ title: \"${1:${TM_FILENAME_BASE}} \" + ${2:id} }} />",
      "",
      "       <Text> ${1:${TM_FILENAME_BASE}} {${2:id}}</Text>",
      "    </View>",
      "  );",
      "}",
      "",
      "const styles = StyleSheet.create({",
      "  container: {",
      "    flex: 1,",
      "    alignItems: \"center\",",
      "    justifyContent: \"center\",",
      "  },",
      "});"
    ],
    "description": "fgp_rn_params snippet"
  },
  "fgp_rn_pre_json": {
    "prefix": "fgp_rn_pre_json",
    "body": [
      "<Text>{JSON.stringify(${1:123}, null, 2)}</Text>"
    ],
    "description": "fgp_rn_pre_json snippet"
  },
  "fgp_rn_taildwind_test": {
    "prefix": "fgp_rn_taildwind_test",
    "body": [
      "import { View, Text, Pressable } from \"react-native\";",
      "",
      "export default function TailwindTestComponent() {",
      "  return (",
      "    <View className=\"flex-1 items-center justify-center bg-gray-100\">",
      "      <View className=\"bg-white rounded-2xl p-6 shadow-md w-80\">",
      "        <Text className=\"text-2xl font-bold text-gray-800 mb-2 text-center\">",
      "          🚀 Hola Tailwind Native",
      "        </Text>",
      "        <Text className=\"text-gray-600 mb-4 text-center\">",
      "          Si esto se ve estilizado, ¡TailwindCSS está funcionando en React Native!",
      "        </Text>",
      "        <Pressable className=\"bg-blue-600 p-3 rounded-lg active:bg-blue-700\">",
      "          <Text className=\"text-white font-semibold text-center\">",
      "            Probar Botón",
      "          </Text>",
      "        </Pressable>",
      "      </View>",
      "    </View>",
      "  );",
      "}"
    ],
    "description": "fgp_rn_taildwind_test snippet"
  },
  "fgp_rn_touch": {
    "prefix": "fgp_rn_touch",
    "body": [
      "<Link href={`/user`} push asChild>",
      "  <TouchableOpacity /* style={styles.transactionsButton} */>",
      "    <MaterialIcons name=\"user\" size={18} color=\"#888\" />",
      "    <Text /* style={styles.actionButtonText} */>user</Text>",
      "  </TouchableOpacity>",
      "</Link>;"
    ],
    "description": "fgp_rn_touch snippet"
  },
  "fgp_r_component": {
    "prefix": "fgp_r_component",
    "body": [
      "// import \"./${TM_FILENAME_BASE}.css\";",
      "",
      "const ${1:${TM_FILENAME_BASE}} = () => {",
      "  return (",
      "    <div>",
      "        <h2>${1:${TM_FILENAME_BASE}}</h2>",
      "    </div>",
      "  );",
      "};",
      "",
      "export default ${1:${TM_FILENAME_BASE}};"
    ],
    "description": "fgp_r_component snippet"
  },
  "fgp_r_component_props": {
    "prefix": "fgp_r_component_props",
    "body": [
      "// import \"./${TM_FILENAME_BASE}.css\";",
      "",
      "interface ${1:${TM_FILENAME_BASE}}Props {",
      "  // props?: string;",
      "}",
      "",
      "const ${1:${TM_FILENAME_BASE}}: React.FC<${TM_FILENAME_BASE}Props> = (props) => {",
      "  return (",
      "    <div>${1:${TM_FILENAME_BASE}}</div>",
      "  );",
      "};",
      "",
      "export default ${1:${TM_FILENAME_BASE}};"
    ],
    "description": "fgp_r_component_props snippet"
  },
  "fgp_r_component_structure": {
    "prefix": "fgp_r_component_structure",
    "body": [
      "import React from 'react';",
      "",
      "interface ${1:Props} {",
      "  title?: string;",
      "  description?: string;",
      "}",
      "",
      "const ${2:ComponentName}: React.FC<$1> = ({ title = \"$3\", description = \"$4\" }) => {",
      "  return (",
      "    <div className=\"${5:wrapper}\">",
      "      <h1>{title}</h1>",
      "      <p>{description}</p>",
      "    </div>",
      "  );",
      "};",
      "",
      "export default $2;"
    ],
    "description": "fgp_r_component_structure snippet"
  },
  "fgp_r_custom_hook": {
    "prefix": "fgp_r_custom_hook",
    "body": [
      "import { useState, useEffect } from 'react';",
      "",
      "function use${1:CustomHook}<T>(initialValue: T): [T, React.Dispatch<React.SetStateAction<T>>] {",
      "  const [value, setValue] = useState<T>(initialValue);",
      "",
      "  useEffect(() => {",
      "    // Logic on mount or update",
      "  }, [value]);",
      "",
      "  return [value, setValue];",
      "}",
      "",
      "export default use${1:CustomHook};"
    ],
    "description": "fgp_r_custom_hook snippet"
  },
  "fgp_r_params": {
    "prefix": "fgp_r_params",
    "body": [
      "// ${TM_FILENAME_BASE}.tsx",
      "",
      "import { useParams } from \"react-router-dom\";",
      "// import \"./${1:${TM_FILENAME_BASE}}ParamsPage.css\";",
      "",
      "const ${1:${TM_FILENAME_BASE}}ParamsPage = () => {",
      "  const { ${2:id} } = useParams();",
      "",
      "  return (",
      "    <div className=\"user-details\">",
      "      <h2>${1:${TM_FILENAME_BASE}}Params</h2>",
      "      <p>${2:id}: {${2:id}}</p>",
      "    </div>",
      "  );",
      "};",
      "",
      "export default ${1:${TM_FILENAME_BASE}}ParamsPage;"
    ],
    "description": "fgp_r_params snippet"
  },
  "fgp_r_pre_json": {
    "prefix": "fgp_r_pre_json",
    "body": [
      "<pre>{JSON.stringify(${1:data}, null, 2)}</pre>"
    ],
    "description": "fgp_r_pre_json snippet"
  },
  "fgp_r_state_management": {
    "prefix": "fgp_r_state_management",
    "body": [
      "import React, { useState, useEffect } from 'react';",
      "",
      "const ${1:ComponentName} = () => {",
      "  const [${2:count}, set${3:Count}] = useState<number>(${4:0});",
      "",
      "  useEffect(() => {",
      "    console.log('Component mounted or ${2:count} changed');",
      "    return () => {",
      "      console.log('Cleanup on unmount');",
      "    };",
      "  }, [${2:count}]);",
      "",
      "  const handleIncrement = () => {",
      "    set${3:Count}(${2:count} + 1);",
      "  };",
      "",
      "  return (",
      "    <div>",
      "      <h1>{${2:count}}</h1>",
      "      <button onClick={handleIncrement}>Increment</button>",
      "    </div>",
      "  );",
      "};",
      "",
      "export default $1;"
    ],
    "description": "fgp_r_state_management snippet"
  },
  "fgp_r_taildwind_test": {
    "prefix": "fgp_r_taildwind_test",
    "body": [
      "export default function TailwindTestCard() {",
      "  return (",
      "    <div className=\"min-h-screen flex items-center justify-center bg-gray-100\">",
      "      <div className=\"bg-white rounded-2xl shadow-lg p-6 max-w-sm w-full text-center\">",
      "        <h1 className=\"text-2xl font-bold text-gray-800 mb-2\">🚀 Hola Tailwind</h1>",
      "        <p className=\"text-gray-600 mb-4\">Si ves estilos bonitos, ¡TailwindCSS funciona!</p>",
      "        <button className=\"px-4 py-2 bg-blue-600 text-white font-semibold rounded-lg shadow-md hover:bg-blue-700 transition\">",
      "          Probar Botón",
      "        </button>",
      "      </div>",
      "    </div>",
      "  );",
      "}"
    ],
    "description": "fgp_r_taildwind_test snippet"
  },
  "fgp_r_useEffect_fetch": {
    "prefix": "fgp_r_useEffect_fetch",
    "body": [
      "import { useEffect, useState } from 'react';",
      "",
      "const ${1:MyComponent} = () => {",
      "  const [${2:data}, set${3:Data}] = useState<any>(null);",
      "  const [${4:loading}, set${5:Loading}] = useState<boolean>(true);",
      "  const [${6:error}, set${7:Error}] = useState<Error | null>(null);",
      "",
      "  useEffect(() => {",
      "    const fetchData = async () => {",
      "      try {",
      "        const response = await fetch('${8:/api/data}');",
      "        const result = await response.json();",
      "        set${3:Data}(result);",
      "      } catch (err: any) {",
      "        set${7:Error}(err);",
      "      } finally {",
      "        set${5:Loading}(false);",
      "      }",
      "    };",
      "",
      "    fetchData();",
      "  }, []);",
      "",
      "  if (${4:loading}) return <p>Loading...</p>;",
      "  if (${6:error}) return <p>Error: {${6:error}.message}</p>;",
      "",
      "  return (",
      "    <div>",
      "      <pre>{JSON.stringify(${2:data}, null, 2)}</pre>",
      "    </div>",
      "  );",
      "};",
      "",
      "export default ${1:MyComponent};"
    ],
    "description": "fgp_r_useEffect_fetch snippet"
  },
  "igb_rn_comp_datepicker": {
    "prefix": "igb_rn_comp_datepicker",
    "body": [
      "import React, { useState } from \"react\";",
      "import { Dimensions, Modal, StyleSheet, Text, TextStyle, TouchableOpacity, View, ViewStyle } from \"react-native\";",
      "import { JSX } from \"react/jsx-runtime\";",
      "",
      "const { width } = Dimensions.get(\"window\");",
      "",
      "// Tipos para las props del componente",
      "interface CustomDatePickerProps {",
      "  value?: Date | null;",
      "  onDateChange?: (date: Date) => void;",
      "  placeholder?: string;",
      "  dateFormat?: \"DD/MM/YYYY\" | \"MM/DD/YYYY\" | \"YYYY-MM-DD\";",
      "  minimumDate?: Date;",
      "  maximumDate?: Date;",
      "  style?: ViewStyle;",
      "  disabled?: boolean;",
      "}",
      "",
      "// Tipos para los estilos",
      "interface Styles {",
      "  container: ViewStyle;",
      "  dateButton: ViewStyle;",
      "  disabledButton: ViewStyle;",
      "  placeholderButton: ViewStyle;",
      "  dateText: TextStyle;",
      "  disabledText: TextStyle;",
      "  placeholderText: TextStyle;",
      "  modalContainer: ViewStyle;",
      "  modalContent: ViewStyle;",
      "  modalHeader: ViewStyle;",
      "  modalTitle: TextStyle;",
      "  modalButton: ViewStyle;",
      "  modalButtonText: TextStyle;",
      "  confirmButton: TextStyle;",
      "  calendarHeader: ViewStyle;",
      "  navButton: ViewStyle;",
      "  navButtonText: TextStyle;",
      "  monthYearText: TextStyle;",
      "  weekDaysContainer: ViewStyle;",
      "  weekDayContainer: ViewStyle;",
      "  weekDayText: TextStyle;",
      "  calendarContainer: ViewStyle;",
      "  dayContainer: ViewStyle;",
      "  dayButton: ViewStyle;",
      "  selectedDay: ViewStyle;",
      "  disabledDay: ViewStyle;",
      "  emptyDay: ViewStyle;",
      "  dayText: TextStyle;",
      "  selectedDayText: TextStyle;",
      "  disabledDayText: TextStyle;",
      "}",
      "",
      "const CustomDatePicker: React.FC<CustomDatePickerProps> = ({",
      "  value = null,",
      "  onDateChange,",
      "  placeholder = \"Seleccionar fecha\",",
      "  dateFormat = \"DD/MM/YYYY\",",
      "  minimumDate,",
      "  maximumDate,",
      "  style,",
      "  disabled = false,",
      "}) => {",
      "  const [showPicker, setShowPicker] = useState<boolean>(false);",
      "  const [selectedDate, setSelectedDate] = useState<Date | null>(value);",
      "  const currentDate: Date = selectedDate || new Date();",
      "  const [currentMonth, setCurrentMonth] = useState<number>(currentDate.getMonth());",
      "  const [currentYear, setCurrentYear] = useState<number>(currentDate.getFullYear());",
      "",
      "  const months: string[] = [",
      "    \"Enero\",",
      "    \"Febrero\",",
      "    \"Marzo\",",
      "    \"Abril\",",
      "    \"Mayo\",",
      "    \"Junio\",",
      "    \"Julio\",",
      "    \"Agosto\",",
      "    \"Septiembre\",",
      "    \"Octubre\",",
      "    \"Noviembre\",",
      "    \"Diciembre\",",
      "  ];",
      "",
      "  const weekDays: string[] = [\"Dom\", \"Lun\", \"Mar\", \"Mié\", \"Jue\", \"Vie\", \"Sáb\"];",
      "",
      "  const formatDate = (date: Date | null): string => {",
      "    if (!date) return placeholder;",
      "",
      "    const day: string = date.getDate().toString().padStart(2, \"0\");",
      "    const month: string = (date.getMonth() + 1).toString().padStart(2, \"0\");",
      "    const year: number = date.getFullYear();",
      "",
      "    switch (dateFormat) {",
      "      case \"DD/MM/YYYY\":",
      "        return `\\${day}/\\${month}/\\${year}`;",
      "      case \"MM/DD/YYYY\":",
      "        return `\\${month}/\\${day}/\\${year}`;",
      "      case \"YYYY-MM-DD\":",
      "        return `\\${year}-\\${month}-\\${day}`;",
      "      default:",
      "        return date.toLocaleDateString(\"es-ES\");",
      "    }",
      "  };",
      "",
      "  const getDaysInMonth = (month: number, year: number): number => {",
      "    return new Date(year, month + 1, 0).getDate();",
      "  };",
      "",
      "  const getFirstDayOfMonth = (month: number, year: number): number => {",
      "    return new Date(year, month, 1).getDay();",
      "  };",
      "",
      "  const isDateDisabled = (date: Date): boolean => {",
      "    if (minimumDate && date < minimumDate) return true;",
      "    if (maximumDate && date > maximumDate) return true;",
      "    return false;",
      "  };",
      "",
      "  const renderCalendar = (): JSX.Element[] => {",
      "    const daysInMonth: number = getDaysInMonth(currentMonth, currentYear);",
      "    const firstDay: number = getFirstDayOfMonth(currentMonth, currentYear);",
      "    const days: JSX.Element[] = [];",
      "",
      "    // Días vacíos al inicio",
      "    for (let i = 0; i < firstDay; i++) {",
      "      days.push(",
      "        <View key={`empty-\\${i}`} style={styles.dayContainer}>",
      "          <View style={styles.emptyDay} />",
      "        </View>",
      "      );",
      "    }",
      "",
      "    // Días del mes",
      "    for (let day = 1; day <= daysInMonth; day++) {",
      "      const date: Date = new Date(currentYear, currentMonth, day);",
      "      const isSelected: boolean =",
      "        selectedDate !== null &&",
      "        date.getDate() === selectedDate.getDate() &&",
      "        date.getMonth() === selectedDate.getMonth() &&",
      "        date.getFullYear() === selectedDate.getFullYear();",
      "      const isDisabled: boolean = isDateDisabled(date);",
      "",
      "      days.push(",
      "        <View key={day} style={styles.dayContainer}>",
      "          <TouchableOpacity",
      "            style={[styles.dayButton, isSelected && styles.selectedDay, isDisabled && styles.disabledDay]}",
      "            onPress={() => !isDisabled && handleDateSelect(date)}",
      "            disabled={isDisabled}",
      "          >",
      "            <Text style={[styles.dayText, isSelected && styles.selectedDayText, isDisabled && styles.disabledDayText]}>",
      "              {day}",
      "            </Text>",
      "          </TouchableOpacity>",
      "        </View>",
      "      );",
      "    }",
      "",
      "    return days;",
      "  };",
      "",
      "  const handleDateSelect = (date: Date): void => {",
      "    setSelectedDate(date);",
      "    onDateChange && onDateChange(date);",
      "    setShowPicker(false);",
      "  };",
      "",
      "  const navigateMonth = (direction: \"prev\" | \"next\"): void => {",
      "    if (direction === \"prev\") {",
      "      if (currentMonth === 0) {",
      "        setCurrentMonth(11);",
      "        setCurrentYear(currentYear - 1);",
      "      } else {",
      "        setCurrentMonth(currentMonth - 1);",
      "      }",
      "    } else {",
      "      if (currentMonth === 11) {",
      "        setCurrentMonth(0);",
      "        setCurrentYear(currentYear + 1);",
      "      } else {",
      "        setCurrentMonth(currentMonth + 1);",
      "      }",
      "    }",
      "  };",
      "",
      "  const openPicker = (): void => {",
      "    if (!disabled) {",
      "      // Si no hay fecha seleccionada, usar la fecha actual para mostrar el calendario",
      "      if (!selectedDate) {",
      "        const today: Date = new Date();",
      "        setCurrentMonth(today.getMonth());",
      "        setCurrentYear(today.getFullYear());",
      "      }",
      "      setShowPicker(true);",
      "    }",
      "  };",
      "",
      "  const closePicker = (): void => {",
      "    setShowPicker(false);",
      "  };",
      "",
      "  return (",
      "    <View style={[styles.container, style]}>",
      "      <TouchableOpacity",
      "        style={[styles.dateButton, disabled && styles.disabledButton, !selectedDate && styles.placeholderButton]}",
      "        onPress={openPicker}",
      "        disabled={disabled}",
      "      >",
      "        <Text style={[styles.dateText, disabled && styles.disabledText, !selectedDate && styles.placeholderText]}>",
      "          {formatDate(selectedDate)}",
      "        </Text>",
      "      </TouchableOpacity>",
      "",
      "      <Modal transparent={true} animationType=\"slide\" visible={showPicker} onRequestClose={closePicker}>",
      "        <TouchableOpacity style={styles.modalContainer} activeOpacity={1} onPress={closePicker}>",
      "          <TouchableOpacity style={styles.modalContent} activeOpacity={1} onPress={() => {}}>",
      "            {/* Header del calendario */}",
      "            <View style={styles.calendarHeader}>",
      "              <TouchableOpacity style={styles.navButton} onPress={() => navigateMonth(\"prev\")}>",
      "                <Text style={styles.navButtonText}>‹</Text>",
      "              </TouchableOpacity>",
      "              <Text style={styles.monthYearText}>",
      "                {months[currentMonth]} {currentYear}",
      "              </Text>",
      "              <TouchableOpacity style={styles.navButton} onPress={() => navigateMonth(\"next\")}>",
      "                <Text style={styles.navButtonText}>›</Text>",
      "              </TouchableOpacity>",
      "            </View>",
      "",
      "            {/* Días de la semana */}",
      "            <View style={styles.weekDaysContainer}>",
      "              {weekDays.map((day: string, index: number) => (",
      "                <View key={index} style={styles.weekDayContainer}>",
      "                  <Text style={styles.weekDayText}>{day}</Text>",
      "                </View>",
      "              ))}",
      "            </View>",
      "",
      "            {/* Calendario */}",
      "            <View style={styles.calendarContainer}>{renderCalendar()}</View>",
      "          </TouchableOpacity>",
      "        </TouchableOpacity>",
      "      </Modal>",
      "    </View>",
      "  );",
      "};",
      "",
      "const styles = StyleSheet.create<Styles>({",
      "  container: {",
      "    width: \"100%\",",
      "  },",
      "  dateButton: {",
      "    borderWidth: 1,",
      "    borderColor: \"#ff69b4\",",
      "    borderRadius: 8,",
      "    paddingHorizontal: 15,",
      "    paddingVertical: 12,",
      "    backgroundColor: \"#ff69b4\",",
      "    minHeight: 48,",
      "    justifyContent: \"center\",",
      "    shadowColor: \"#ff69b4\",",
      "    shadowOffset: {",
      "      width: 0,",
      "      height: 2,",
      "    },",
      "    shadowOpacity: 0.25,",
      "    shadowRadius: 3.84,",
      "    elevation: 5,",
      "  },",
      "  disabledButton: {",
      "    backgroundColor: \"#ffb3d9\",",
      "    borderColor: \"#ffb3d9\",",
      "    opacity: 0.6,",
      "  },",
      "  placeholderButton: {",
      "    borderColor: \"#ff69b4\",",
      "    backgroundColor: \"#ffcce5\",",
      "  },",
      "  dateText: {",
      "    fontSize: 16,",
      "    color: \"#fff\",",
      "    fontWeight: \"500\",",
      "  },",
      "  disabledText: {",
      "    color: \"#fff\",",
      "    opacity: 0.8,",
      "  },",
      "  placeholderText: {",
      "    color: \"#cc0066\",",
      "    fontStyle: \"italic\",",
      "    fontWeight: \"400\",",
      "  },",
      "  modalContainer: {",
      "    flex: 1,",
      "    justifyContent: \"center\",",
      "    alignItems: \"center\",",
      "    backgroundColor: \"rgba(255, 105, 180, 0.3)\",",
      "  },",
      "  modalContent: {",
      "    backgroundColor: \"#ff69b4\",",
      "    borderRadius: 20,",
      "    width: width * 0.9,",
      "    maxWidth: 350,",
      "    overflow: \"hidden\",",
      "  },",
      "  modalHeader: {",
      "    display: \"none\",",
      "  },",
      "  modalTitle: {",
      "    display: \"none\",",
      "  },",
      "  modalButton: {",
      "    display: \"none\",",
      "  },",
      "  modalButtonText: {",
      "    display: \"none\",",
      "  },",
      "  confirmButton: {",
      "    display: \"none\",",
      "  },",
      "  calendarHeader: {",
      "    flexDirection: \"row\",",
      "    justifyContent: \"space-between\",",
      "    alignItems: \"center\",",
      "    paddingHorizontal: 20,",
      "    paddingVertical: 20,",
      "    backgroundColor: \"#ff69b4\",",
      "    borderTopLeftRadius: 20,",
      "    borderTopRightRadius: 20,",
      "  },",
      "  navButton: {",
      "    padding: 10,",
      "    borderRadius: 20,",
      "    backgroundColor: \"rgba(255, 255, 255, 0.3)\",",
      "    borderWidth: 1,",
      "    borderColor: \"rgba(255, 255, 255, 0.5)\",",
      "  },",
      "  navButtonText: {",
      "    fontSize: 20,",
      "    color: \"#fff\",",
      "    fontWeight: \"bold\",",
      "  },",
      "  monthYearText: {",
      "    fontSize: 18,",
      "    fontWeight: \"600\",",
      "    color: \"#fff\",",
      "  },",
      "  weekDaysContainer: {",
      "    flexDirection: \"row\",",
      "    backgroundColor: \"#ffcce5\",",
      "    paddingVertical: 10,",
      "  },",
      "  weekDayContainer: {",
      "    flex: 1,",
      "    alignItems: \"center\",",
      "  },",
      "  weekDayText: {",
      "    fontSize: 14,",
      "    fontWeight: \"600\",",
      "    color: \"#cc0066\",",
      "  },",
      "  calendarContainer: {",
      "    flexDirection: \"row\",",
      "    flexWrap: \"wrap\",",
      "    backgroundColor: \"#ff69b4\",",
      "    paddingHorizontal: 10,",
      "    paddingBottom: 20,",
      "  },",
      "  dayContainer: {",
      "    width: `\\${100 / 7}%` as any,",
      "    aspectRatio: 1,",
      "    padding: 2,",
      "  },",
      "  dayButton: {",
      "    flex: 1,",
      "    justifyContent: \"center\",",
      "    alignItems: \"center\",",
      "    borderRadius: 20,",
      "    backgroundColor: \"transparent\",",
      "  },",
      "  selectedDay: {",
      "    backgroundColor: \"#fff\",",
      "    shadowColor: \"#ff69b4\",",
      "    shadowOffset: {",
      "      width: 0,",
      "      height: 2,",
      "    },",
      "    shadowOpacity: 0.25,",
      "    shadowRadius: 3.84,",
      "    elevation: 5,",
      "  },",
      "  disabledDay: {",
      "    opacity: 0.3,",
      "  },",
      "  emptyDay: {",
      "    flex: 1,",
      "  },",
      "  dayText: {",
      "    fontSize: 16,",
      "    color: \"#fff\",",
      "    fontWeight: \"500\",",
      "  },",
      "  selectedDayText: {",
      "    color: \"#ff69b4\",",
      "    fontWeight: \"700\",",
      "  },",
      "  disabledDayText: {",
      "    color: \"rgba(255, 255, 255, 0.5)\",",
      "  },",
      "});",
      "",
      "// Ejemplo de uso del componente",
      "interface AppState {",
      "  selectedDate: Date | null;",
      "  selectedDate2: Date | null;",
      "}",
      "",
      "const App: React.FC = () => {",
      "  const [selectedDate, setSelectedDate] = useState<Date | null>(new Date());",
      "  const [selectedDate2, setSelectedDate2] = useState<Date | null>(null);",
      "",
      "  const handleDateChange = (date: Date): void => {",
      "    setSelectedDate(date);",
      "  };",
      "",
      "  const handleDateChange2 = (date: Date): void => {",
      "    setSelectedDate2(date);",
      "  };",
      "",
      "  return (",
      "    <View style={appStyles.container}>",
      "      <Text style={appStyles.title}>Date Picker Rosa Personalizado</Text>",
      "",
      "      <View style={appStyles.section}>",
      "        <Text style={appStyles.label}>Fecha con valor inicial:</Text>",
      "        <CustomDatePicker",
      "          value={selectedDate}",
      "          onDateChange={handleDateChange}",
      "          placeholder=\"Selecciona una fecha\"",
      "          dateFormat=\"DD/MM/YYYY\"",
      "          minimumDate={new Date(2020, 0, 1)}",
      "          maximumDate={new Date(2030, 11, 31)}",
      "        />",
      "        <Text style={appStyles.result}>",
      "          Fecha seleccionada: {selectedDate ? selectedDate.toLocaleDateString(\"es-ES\") : \"Ninguna\"}",
      "        </Text>",
      "      </View>",
      "",
      "      <View style={appStyles.section}>",
      "        <Text style={appStyles.label}>Fecha sin valor inicial:</Text>",
      "        <CustomDatePicker",
      "          value={selectedDate2}",
      "          onDateChange={handleDateChange2}",
      "          placeholder=\"Toca para seleccionar fecha\"",
      "          dateFormat=\"DD/MM/YYYY\"",
      "        />",
      "        <Text style={appStyles.result}>",
      "          Fecha seleccionada: {selectedDate2 ? selectedDate2.toLocaleDateString(\"es-ES\") : \"Ninguna\"}",
      "        </Text>",
      "      </View>",
      "",
      "      <View style={appStyles.section}>",
      "        <Text style={appStyles.label}>Date Picker Deshabilitado:</Text>",
      "        <CustomDatePicker value={new Date()} placeholder=\"Campo deshabilitado\" disabled={true} />",
      "      </View>",
      "    </View>",
      "  );",
      "};",
      "",
      "interface AppStyles {",
      "  container: ViewStyle;",
      "  title: TextStyle;",
      "  section: ViewStyle;",
      "  label: TextStyle;",
      "  result: TextStyle;",
      "}",
      "",
      "const appStyles = StyleSheet.create<AppStyles>({",
      "  container: {",
      "    flex: 1,",
      "    padding: 20,",
      "    backgroundColor: \"#ffe6f2\",",
      "  },",
      "  title: {",
      "    fontSize: 24,",
      "    fontWeight: \"bold\",",
      "    textAlign: \"center\",",
      "    marginBottom: 30,",
      "    color: \"#cc0066\",",
      "  },",
      "  section: {",
      "    marginBottom: 25,",
      "  },",
      "  label: {",
      "    fontSize: 16,",
      "    fontWeight: \"600\",",
      "    marginBottom: 8,",
      "    color: \"#cc0066\",",
      "  },",
      "  result: {",
      "    marginTop: 8,",
      "    fontSize: 14,",
      "    color: \"#666\",",
      "    fontStyle: \"italic\",",
      "  },",
      "});",
      "",
      "export default App;"
    ],
    "description": "igb_rn_comp_datepicker snippet"
  },
  "igb_rn_comp_datepicker_screen": {
    "prefix": "igb_rn_comp_datepicker_screen",
    "body": [
      "import React, { useState } from \"react\";",
      "import { Dimensions, Modal, StyleSheet, Text, TextStyle, TouchableOpacity, View, ViewStyle } from \"react-native\";",
      "import { JSX } from \"react/jsx-runtime\";",
      "",
      "const { width } = Dimensions.get(\"window\");",
      "",
      "// Tipos para las props del componente",
      "interface CustomDatePickerProps {",
      "  value?: Date | null;",
      "  onDateChange?: (date: Date) => void;",
      "  placeholder?: string;",
      "  dateFormat?: \"DD/MM/YYYY\" | \"MM/DD/YYYY\" | \"YYYY-MM-DD\";",
      "  minimumDate?: Date;",
      "  maximumDate?: Date;",
      "  style?: ViewStyle;",
      "  disabled?: boolean;",
      "}",
      "",
      "// Tipos para los estilos",
      "interface Styles {",
      "  container: ViewStyle;",
      "  dateButton: ViewStyle;",
      "  disabledButton: ViewStyle;",
      "  placeholderButton: ViewStyle;",
      "  dateText: TextStyle;",
      "  disabledText: TextStyle;",
      "  placeholderText: TextStyle;",
      "  modalContainer: ViewStyle;",
      "  modalContent: ViewStyle;",
      "  modalHeader: ViewStyle;",
      "  modalTitle: TextStyle;",
      "  modalButton: ViewStyle;",
      "  modalButtonText: TextStyle;",
      "  confirmButton: TextStyle;",
      "  calendarHeader: ViewStyle;",
      "  navButton: ViewStyle;",
      "  navButtonText: TextStyle;",
      "  monthYearText: TextStyle;",
      "  weekDaysContainer: ViewStyle;",
      "  weekDayContainer: ViewStyle;",
      "  weekDayText: TextStyle;",
      "  calendarContainer: ViewStyle;",
      "  dayContainer: ViewStyle;",
      "  dayButton: ViewStyle;",
      "  selectedDay: ViewStyle;",
      "  disabledDay: ViewStyle;",
      "  emptyDay: ViewStyle;",
      "  dayText: TextStyle;",
      "  selectedDayText: TextStyle;",
      "  disabledDayText: TextStyle;",
      "}",
      "",
      "export const CustomDatePicker: React.FC<CustomDatePickerProps> = ({",
      "  value = null,",
      "  onDateChange,",
      "  placeholder = \"Seleccionar fecha\",",
      "  dateFormat = \"DD/MM/YYYY\",",
      "  minimumDate,",
      "  maximumDate,",
      "  style,",
      "  disabled = false,",
      "}) => {",
      "  const [showPicker, setShowPicker] = useState<boolean>(false);",
      "  const [selectedDate, setSelectedDate] = useState<Date | null>(value);",
      "  const currentDate: Date = selectedDate || new Date();",
      "  const [currentMonth, setCurrentMonth] = useState<number>(currentDate.getMonth());",
      "  const [currentYear, setCurrentYear] = useState<number>(currentDate.getFullYear());",
      "",
      "  const months: string[] = [",
      "    \"Enero\",",
      "    \"Febrero\",",
      "    \"Marzo\",",
      "    \"Abril\",",
      "    \"Mayo\",",
      "    \"Junio\",",
      "    \"Julio\",",
      "    \"Agosto\",",
      "    \"Septiembre\",",
      "    \"Octubre\",",
      "    \"Noviembre\",",
      "    \"Diciembre\",",
      "  ];",
      "",
      "  const weekDays: string[] = [\"Dom\", \"Lun\", \"Mar\", \"Mié\", \"Jue\", \"Vie\", \"Sáb\"];",
      "",
      "  const formatDate = (date: Date | null): string => {",
      "    if (!date) return placeholder;",
      "",
      "    const day: string = date.getDate().toString().padStart(2, \"0\");",
      "    const month: string = (date.getMonth() + 1).toString().padStart(2, \"0\");",
      "    const year: number = date.getFullYear();",
      "",
      "    switch (dateFormat) {",
      "      case \"DD/MM/YYYY\":",
      "        return `${day}/${month}/${year}`;",
      "      case \"MM/DD/YYYY\":",
      "        return `${month}/${day}/${year}`;",
      "      case \"YYYY-MM-DD\":",
      "        return `${year}-${month}-${day}`;",
      "      default:",
      "        return date.toLocaleDateString(\"es-ES\");",
      "    }",
      "  };",
      "",
      "  const getDaysInMonth = (month: number, year: number): number => {",
      "    return new Date(year, month + 1, 0).getDate();",
      "  };",
      "",
      "  const getFirstDayOfMonth = (month: number, year: number): number => {",
      "    return new Date(year, month, 1).getDay();",
      "  };",
      "",
      "  const isDateDisabled = (date: Date): boolean => {",
      "    if (minimumDate && date < minimumDate) return true;",
      "    if (maximumDate && date > maximumDate) return true;",
      "    return false;",
      "  };",
      "",
      "  const renderCalendar = (): JSX.Element[] => {",
      "    const daysInMonth: number = getDaysInMonth(currentMonth, currentYear);",
      "    const firstDay: number = getFirstDayOfMonth(currentMonth, currentYear);",
      "    const days: JSX.Element[] = [];",
      "",
      "    // Días vacíos al inicio",
      "    for (let i = 0; i < firstDay; i++) {",
      "      days.push(",
      "        <View key={`empty-${i}`} style={styles.dayContainer}>",
      "          <View style={styles.emptyDay} />",
      "        </View>",
      "      );",
      "    }",
      "",
      "    // Días del mes",
      "    for (let day = 1; day <= daysInMonth; day++) {",
      "      const date: Date = new Date(currentYear, currentMonth, day);",
      "      const isSelected: boolean =",
      "        selectedDate !== null &&",
      "        date.getDate() === selectedDate.getDate() &&",
      "        date.getMonth() === selectedDate.getMonth() &&",
      "        date.getFullYear() === selectedDate.getFullYear();",
      "      const isDisabled: boolean = isDateDisabled(date);",
      "",
      "      days.push(",
      "        <View key={day} style={styles.dayContainer}>",
      "          <TouchableOpacity",
      "            style={[styles.dayButton, isSelected && styles.selectedDay, isDisabled && styles.disabledDay]}",
      "            onPress={() => !isDisabled && handleDateSelect(date)}",
      "            disabled={isDisabled}",
      "          >",
      "            <Text style={[styles.dayText, isSelected && styles.selectedDayText, isDisabled && styles.disabledDayText]}>",
      "              {day}",
      "            </Text>",
      "          </TouchableOpacity>",
      "        </View>",
      "      );",
      "    }",
      "",
      "    return days;",
      "  };",
      "",
      "  const handleDateSelect = (date: Date): void => {",
      "    setSelectedDate(date);",
      "    onDateChange && onDateChange(date);",
      "    setShowPicker(false);",
      "  };",
      "",
      "  const navigateMonth = (direction: \"prev\" | \"next\"): void => {",
      "    if (direction === \"prev\") {",
      "      if (currentMonth === 0) {",
      "        setCurrentMonth(11);",
      "        setCurrentYear(currentYear - 1);",
      "      } else {",
      "        setCurrentMonth(currentMonth - 1);",
      "      }",
      "    } else {",
      "      if (currentMonth === 11) {",
      "        setCurrentMonth(0);",
      "        setCurrentYear(currentYear + 1);",
      "      } else {",
      "        setCurrentMonth(currentMonth + 1);",
      "      }",
      "    }",
      "  };",
      "",
      "  const openPicker = (): void => {",
      "    if (!disabled) {",
      "      // Si no hay fecha seleccionada, usar la fecha actual para mostrar el calendario",
      "      if (!selectedDate) {",
      "        const today: Date = new Date();",
      "        setCurrentMonth(today.getMonth());",
      "        setCurrentYear(today.getFullYear());",
      "      }",
      "      setShowPicker(true);",
      "    }",
      "  };",
      "",
      "  const closePicker = (): void => {",
      "    setShowPicker(false);",
      "  };",
      "",
      "  return (",
      "    <View style={[styles.container, style]}>",
      "      <TouchableOpacity",
      "        style={[styles.dateButton, disabled && styles.disabledButton, !selectedDate && styles.placeholderButton]}",
      "        onPress={openPicker}",
      "        disabled={disabled}",
      "      >",
      "        <Text style={[styles.dateText, disabled && styles.disabledText, !selectedDate && styles.placeholderText]}>",
      "          {formatDate(selectedDate)}",
      "        </Text>",
      "      </TouchableOpacity>",
      "",
      "      <Modal transparent={true} animationType=\"slide\" visible={showPicker} onRequestClose={closePicker}>",
      "        <TouchableOpacity style={styles.modalContainer} activeOpacity={1} onPress={closePicker}>",
      "          <TouchableOpacity style={styles.modalContent} activeOpacity={1} onPress={() => {}}>",
      "            {/* Header del calendario */}",
      "            <View style={styles.calendarHeader}>",
      "              <TouchableOpacity style={styles.navButton} onPress={() => navigateMonth(\"prev\")}>",
      "                <Text style={styles.navButtonText}>‹</Text>",
      "              </TouchableOpacity>",
      "              <Text style={styles.monthYearText}>",
      "                {months[currentMonth]} {currentYear}",
      "              </Text>",
      "              <TouchableOpacity style={styles.navButton} onPress={() => navigateMonth(\"next\")}>",
      "                <Text style={styles.navButtonText}>›</Text>",
      "              </TouchableOpacity>",
      "            </View>",
      "",
      "            {/* Días de la semana */}",
      "            <View style={styles.weekDaysContainer}>",
      "              {weekDays.map((day: string, index: number) => (",
      "                <View key={index} style={styles.weekDayContainer}>",
      "                  <Text style={styles.weekDayText}>{day}</Text>",
      "                </View>",
      "              ))}",
      "            </View>",
      "",
      "            {/* Calendario */}",
      "            <View style={styles.calendarContainer}>{renderCalendar()}</View>",
      "          </TouchableOpacity>",
      "        </TouchableOpacity>",
      "      </Modal>",
      "    </View>",
      "  );",
      "};",
      "",
      "const styles = StyleSheet.create<Styles>({",
      "  container: {",
      "    width: \"100%\",",
      "  },",
      "  dateButton: {",
      "    borderWidth: 1,",
      "    borderColor: \"#ff69b4\",",
      "    borderRadius: 8,",
      "    paddingHorizontal: 15,",
      "    paddingVertical: 12,",
      "    backgroundColor: \"#ff69b4\",",
      "    minHeight: 48,",
      "    justifyContent: \"center\",",
      "    shadowColor: \"#ff69b4\",",
      "    shadowOffset: {",
      "      width: 0,",
      "      height: 2,",
      "    },",
      "    shadowOpacity: 0.25,",
      "    shadowRadius: 3.84,",
      "    elevation: 5,",
      "  },",
      "  disabledButton: {",
      "    backgroundColor: \"#ffb3d9\",",
      "    borderColor: \"#ffb3d9\",",
      "    opacity: 0.6,",
      "  },",
      "  placeholderButton: {",
      "    borderColor: \"#ff69b4\",",
      "    backgroundColor: \"#ffcce5\",",
      "  },",
      "  dateText: {",
      "    fontSize: 16,",
      "    color: \"#fff\",",
      "    fontWeight: \"500\",",
      "  },",
      "  disabledText: {",
      "    color: \"#fff\",",
      "    opacity: 0.8,",
      "  },",
      "  placeholderText: {",
      "    color: \"#cc0066\",",
      "    fontStyle: \"italic\",",
      "    fontWeight: \"400\",",
      "  },",
      "  modalContainer: {",
      "    flex: 1,",
      "    justifyContent: \"center\",",
      "    alignItems: \"center\",",
      "    backgroundColor: \"rgba(255, 105, 180, 0.3)\",",
      "  },",
      "  modalContent: {",
      "    backgroundColor: \"#ff69b4\",",
      "    borderRadius: 20,",
      "    width: width * 0.9,",
      "    maxWidth: 350,",
      "    overflow: \"hidden\",",
      "  },",
      "  modalHeader: {",
      "    display: \"none\",",
      "  },",
      "  modalTitle: {",
      "    display: \"none\",",
      "  },",
      "  modalButton: {",
      "    display: \"none\",",
      "  },",
      "  modalButtonText: {",
      "    display: \"none\",",
      "  },",
      "  confirmButton: {",
      "    display: \"none\",",
      "  },",
      "  calendarHeader: {",
      "    flexDirection: \"row\",",
      "    justifyContent: \"space-between\",",
      "    alignItems: \"center\",",
      "    paddingHorizontal: 20,",
      "    paddingVertical: 20,",
      "    backgroundColor: \"#ff69b4\",",
      "    borderTopLeftRadius: 20,",
      "    borderTopRightRadius: 20,",
      "  },",
      "  navButton: {",
      "    padding: 10,",
      "    borderRadius: 20,",
      "    backgroundColor: \"rgba(255, 255, 255, 0.3)\",",
      "    borderWidth: 1,",
      "    borderColor: \"rgba(255, 255, 255, 0.5)\",",
      "  },",
      "  navButtonText: {",
      "    fontSize: 20,",
      "    color: \"#fff\",",
      "    fontWeight: \"bold\",",
      "  },",
      "  monthYearText: {",
      "    fontSize: 18,",
      "    fontWeight: \"600\",",
      "    color: \"#fff\",",
      "  },",
      "  weekDaysContainer: {",
      "    flexDirection: \"row\",",
      "    backgroundColor: \"#ffcce5\",",
      "    paddingVertical: 10,",
      "  },",
      "  weekDayContainer: {",
      "    flex: 1,",
      "    alignItems: \"center\",",
      "  },",
      "  weekDayText: {",
      "    fontSize: 14,",
      "    fontWeight: \"600\",",
      "    color: \"#cc0066\",",
      "  },",
      "  calendarContainer: {",
      "    flexDirection: \"row\",",
      "    flexWrap: \"wrap\",",
      "    backgroundColor: \"#ff69b4\",",
      "    paddingHorizontal: 10,",
      "    paddingBottom: 20,",
      "  },",
      "  dayContainer: {",
      "    width: `${100 / 7}%` as any,",
      "    aspectRatio: 1,",
      "    padding: 2,",
      "  },",
      "  dayButton: {",
      "    flex: 1,",
      "    justifyContent: \"center\",",
      "    alignItems: \"center\",",
      "    borderRadius: 20,",
      "    backgroundColor: \"transparent\",",
      "  },",
      "  selectedDay: {",
      "    backgroundColor: \"#fff\",",
      "    shadowColor: \"#ff69b4\",",
      "    shadowOffset: {",
      "      width: 0,",
      "      height: 2,",
      "    },",
      "    shadowOpacity: 0.25,",
      "    shadowRadius: 3.84,",
      "    elevation: 5,",
      "  },",
      "  disabledDay: {",
      "    opacity: 0.3,",
      "  },",
      "  emptyDay: {",
      "    flex: 1,",
      "  },",
      "  dayText: {",
      "    fontSize: 16,",
      "    color: \"#fff\",",
      "    fontWeight: \"500\",",
      "  },",
      "  selectedDayText: {",
      "    color: \"#ff69b4\",",
      "    fontWeight: \"700\",",
      "  },",
      "  disabledDayText: {",
      "    color: \"rgba(255, 255, 255, 0.5)\",",
      "  },",
      "});",
      "",
      "// Ejemplo de uso del componente",
      "interface AppState {",
      "  selectedDate: Date | null;",
      "  selectedDate2: Date | null;",
      "}",
      "",
      "const App: React.FC = () => {",
      "  const [selectedDate, setSelectedDate] = useState<Date | null>(new Date());",
      "  const [selectedDate2, setSelectedDate2] = useState<Date | null>(null);",
      "",
      "  const handleDateChange = (date: Date): void => {",
      "    setSelectedDate(date);",
      "  };",
      "",
      "  const handleDateChange2 = (date: Date): void => {",
      "    setSelectedDate2(date);",
      "  };",
      "",
      "  return (",
      "    <View style={appStyles.container}>",
      "      <Text style={appStyles.title}>Date Picker Rosa Personalizado</Text>",
      "",
      "      <View style={appStyles.section}>",
      "        <Text style={appStyles.label}>Fecha con valor inicial:</Text>",
      "        <CustomDatePicker",
      "          value={selectedDate}",
      "          onDateChange={handleDateChange}",
      "          placeholder=\"Selecciona una fecha\"",
      "          dateFormat=\"DD/MM/YYYY\"",
      "          minimumDate={new Date(2020, 0, 1)}",
      "          maximumDate={new Date(2030, 11, 31)}",
      "        />",
      "        <Text style={appStyles.result}>",
      "          Fecha seleccionada: {selectedDate ? selectedDate.toLocaleDateString(\"es-ES\") : \"Ninguna\"}",
      "        </Text>",
      "      </View>",
      "",
      "      <View style={appStyles.section}>",
      "        <Text style={appStyles.label}>Fecha sin valor inicial:</Text>",
      "        <CustomDatePicker",
      "          value={selectedDate2}",
      "          onDateChange={handleDateChange2}",
      "          placeholder=\"Toca para seleccionar fecha\"",
      "          dateFormat=\"DD/MM/YYYY\"",
      "        />",
      "        <Text style={appStyles.result}>",
      "          Fecha seleccionada: {selectedDate2 ? selectedDate2.toLocaleDateString(\"es-ES\") : \"Ninguna\"}",
      "        </Text>",
      "      </View>",
      "",
      "      <View style={appStyles.section}>",
      "        <Text style={appStyles.label}>Date Picker Deshabilitado:</Text>",
      "        <CustomDatePicker value={new Date()} placeholder=\"Campo deshabilitado\" disabled={true} />",
      "      </View>",
      "    </View>",
      "  );",
      "};",
      "",
      "interface AppStyles {",
      "  container: ViewStyle;",
      "  title: TextStyle;",
      "  section: ViewStyle;",
      "  label: TextStyle;",
      "  result: TextStyle;",
      "}",
      "",
      "const appStyles = StyleSheet.create<AppStyles>({",
      "  container: {",
      "    flex: 1,",
      "    padding: 20,",
      "    backgroundColor: \"#ffe6f2\",",
      "  },",
      "  title: {",
      "    fontSize: 24,",
      "    fontWeight: \"bold\",",
      "    textAlign: \"center\",",
      "    marginBottom: 30,",
      "    color: \"#cc0066\",",
      "  },",
      "  section: {",
      "    marginBottom: 25,",
      "  },",
      "  label: {",
      "    fontSize: 16,",
      "    fontWeight: \"600\",",
      "    marginBottom: 8,",
      "    color: \"#cc0066\",",
      "  },",
      "  result: {",
      "    marginTop: 8,",
      "    fontSize: 14,",
      "    color: \"#666\",",
      "    fontStyle: \"italic\",",
      "  },",
      "});",
      "",
      "export default App;",
      "",
      "/* ",
      "      <View>",
      "        <Text>Fecha con valor inicial:</Text>",
      "        <CustomDatePicker",
      "          value={new Date(2023, 11, 25)}",
      "          onDateChange={(date) => console.log(\"Fecha seleccionada:\", date)}",
      "          placeholder=\"Selecciona una fecha\"",
      "          dateFormat=\"DD/MM/YYYY\"",
      "          minimumDate={new Date(2020, 0, 1)}",
      "          maximumDate={new Date(2030, 11, 31)}",
      "        />",
      "      </View>",
      "*/"
    ],
    "description": "igb_rn_comp_datepicker_screen snippet"
  }
}