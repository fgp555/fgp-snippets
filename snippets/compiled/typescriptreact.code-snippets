{
  "fgp_component": {
    "prefix": "fgp_component",
    "body": [
      "import \"./${TM_FILENAME_BASE}.css\";",
      "",
      "interface ${TM_FILENAME_BASE}Props {",
      "  // props?: string;",
      "}",
      "",
      "const ${TM_FILENAME_BASE}: React.FC<${TM_FILENAME_BASE}Props> = (props) => {",
      "  return (",
      "    <div>${TM_FILENAME_BASE}</div>",
      "  );",
      "};",
      "",
      "export default ${TM_FILENAME_BASE};"
    ],
    "description": "fgp_component snippet"
  },
  "fgp_component_structure": {
    "prefix": "fgp_component_structure",
    "body": [
      "import React from 'react';",
      "",
      "interface ${1:Props} {",
      "  title?: string;",
      "  description?: string;",
      "}",
      "",
      "const ${2:ComponentName}: React.FC<$1> = ({ title = \"$3\", description = \"$4\" }) => {",
      "  return (",
      "    <div className=\"${5:wrapper}\">",
      "      <h1>{title}</h1>",
      "      <p>{description}</p>",
      "    </div>",
      "  );",
      "};",
      "",
      "export default $2;"
    ],
    "description": "fgp_component_structure snippet"
  },
  "fgp_custom_hook": {
    "prefix": "fgp_custom_hook",
    "body": [
      "import { useState, useEffect } from 'react';",
      "",
      "function use${1:CustomHook}<T>(initialValue: T): [T, React.Dispatch<React.SetStateAction<T>>] {",
      "  const [value, setValue] = useState<T>(initialValue);",
      "",
      "  useEffect(() => {",
      "    // Logic on mount or update",
      "  }, [value]);",
      "",
      "  return [value, setValue];",
      "}",
      "",
      "export default use${1:CustomHook};"
    ],
    "description": "fgp_custom_hook snippet"
  },
  "fgp_state_management": {
    "prefix": "fgp_state_management",
    "body": [
      "import React, { useState, useEffect } from 'react';",
      "",
      "const ${1:ComponentName} = () => {",
      "  const [${2:count}, set${3:Count}] = useState<number>(${4:0});",
      "",
      "  useEffect(() => {",
      "    console.log('Component mounted or ${2:count} changed');",
      "    return () => {",
      "      console.log('Cleanup on unmount');",
      "    };",
      "  }, [${2:count}]);",
      "",
      "  const handleIncrement = () => {",
      "    set${3:Count}(${2:count} + 1);",
      "  };",
      "",
      "  return (",
      "    <div>",
      "      <h1>{${2:count}}</h1>",
      "      <button onClick={handleIncrement}>Increment</button>",
      "    </div>",
      "  );",
      "};",
      "",
      "export default $1;"
    ],
    "description": "fgp_state_management snippet"
  },
  "fgp_useEffect_fetch": {
    "prefix": "fgp_useEffect_fetch",
    "body": [
      "import { useEffect, useState } from 'react';",
      "",
      "const ${1:MyComponent} = () => {",
      "  const [${2:data}, set${3:Data}] = useState<any>(null);",
      "  const [${4:loading}, set${5:Loading}] = useState<boolean>(true);",
      "  const [${6:error}, set${7:Error}] = useState<Error | null>(null);",
      "",
      "  useEffect(() => {",
      "    const fetchData = async () => {",
      "      try {",
      "        const response = await fetch('${8:/api/data}');",
      "        const result = await response.json();",
      "        set${3:Data}(result);",
      "      } catch (err: any) {",
      "        set${7:Error}(err);",
      "      } finally {",
      "        set${5:Loading}(false);",
      "      }",
      "    };",
      "",
      "    fetchData();",
      "  }, []);",
      "",
      "  if (${4:loading}) return <p>Loading...</p>;",
      "  if (${6:error}) return <p>Error: {${6:error}.message}</p>;",
      "",
      "  return (",
      "    <div>",
      "      <pre>{JSON.stringify(${2:data}, null, 2)}</pre>",
      "    </div>",
      "  );",
      "};",
      "",
      "export default ${1:MyComponent};"
    ],
    "description": "fgp_useEffect_fetch snippet"
  }
}