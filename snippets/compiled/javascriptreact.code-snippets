{
  "fgp_component": {
    "prefix": "fgp_component",
    "body": [
      "// import \"./${TM_FILENAME_BASE}.css\";",
      "",
      "const ${1:${TM_FILENAME_BASE}} = () => {",
      "  return (",
      "    <div>${1:${TM_FILENAME_BASE}}</div>",
      "  );",
      "};",
      "",
      "export default ${1:${TM_FILENAME_BASE}};"
    ],
    "description": "fgp_component snippet"
  },
  "fgp_component_structure": {
    "prefix": "fgp_component_structure",
    "body": [
      "import React from 'react';",
      "",
      "const $1 = () => {",
      "  return (",
      "    <div className=\"$2\">",
      "      <h1>$1</h1>",
      "      <p>$3</p>",
      "    </div>",
      "  );",
      "};",
      "",
      "export default $1;"
    ],
    "description": "fgp_component_structure snippet"
  },
  "fgp_custom_hook": {
    "prefix": "fgp_custom_hook",
    "body": [
      "import { useState, useEffect } from 'react';",
      "",
      "const use${1:CustomHook} = (${2:initialValue}) => {",
      "  const [${3:value}, set${4:Value}] = useState(${2:initialValue});",
      "",
      "  useEffect(() => {",
      "    // Lógica al montar o actualizar",
      "  }, [${3:value}]);",
      "",
      "  return [${3:value}, set${4:Value}];",
      "};",
      "",
      "export default use${1:CustomHook};"
    ],
    "description": "fgp_custom_hook snippet"
  },
  "fgp_state_management": {
    "prefix": "fgp_state_management",
    "body": [
      "import React, { useState, useEffect } from 'react';",
      "",
      "const $1 = () => {",
      "  const [${2:count}, set${3:Count}] = useState(${4:0});",
      "",
      "  useEffect(() => {",
      "    console.log('Component mounted or ${2:count} changed');",
      "    return () => {",
      "      console.log('Cleanup on unmount');",
      "    };",
      "  }, [${2:count}]);",
      "",
      "  const handleIncrement = () => {",
      "    set${3:Count}(${2:count} + 1);",
      "  };",
      "",
      "  return (",
      "    <div>",
      "      <h1>${2:count}</h1>",
      "      <button onClick={handleIncrement}>Increment</button>",
      "    </div>",
      "  );",
      "};",
      "",
      "export default $1;"
    ],
    "description": "fgp_state_management snippet"
  },
  "fgp_useEffect_fetch": {
    "prefix": "fgp_useEffect_fetch",
    "body": [
      "import { useEffect, useState } from 'react';",
      "",
      "const ${1:MyComponent} = () => {",
      "  const [${2:data}, set${3:Data}] = useState(null);",
      "  const [${4:loading}, set${5:Loading}] = useState(true);",
      "  const [${6:error}, set${7:Error}] = useState(null);",
      "",
      "  useEffect(() => {",
      "    const fetchData = async () => {",
      "      try {",
      "        const response = await fetch('${8:/api/data}');",
      "        const result = await response.json();",
      "        set${3:Data}(result);",
      "      } catch (err) {",
      "        set${7:Error}(err);",
      "      } finally {",
      "        set${5:Loading}(false);",
      "      }",
      "    };",
      "",
      "    fetchData();",
      "  }, []);",
      "",
      "  if (${4:loading}) return <p>Loading...</p>;",
      "  if (${6:error}) return <p>Error: {${6:error}.message}</p>;",
      "",
      "  return (",
      "    <div>",
      "      {/* Renderiza aquí los datos */}",
      "      <pre>{JSON.stringify(${2:data}, null, 2)}</pre>",
      "    </div>",
      "  );",
      "};",
      "",
      "export default ${1:MyComponent};"
    ],
    "description": "fgp_useEffect_fetch snippet"
  },
  "igb_component_datepicker": {
    "prefix": "igb_component_datepicker",
    "body": [
      "import React, { useState } from 'react';",
      "import {",
      "  Dimensions,",
      "  Modal,",
      "  StyleSheet,",
      "  Text,",
      "  TouchableOpacity,",
      "  View",
      "} from 'react-native';",
      "",
      "const { width } = Dimensions.get('window');",
      "",
      "const CustomDatePicker = ({",
      "  value = null,",
      "  onDateChange,",
      "  placeholder = 'Seleccionar fecha',",
      "  dateFormat = 'DD/MM/YYYY',",
      "  minimumDate,",
      "  maximumDate,",
      "  style,",
      "  disabled = false,",
      "}) => {",
      "  const [showPicker, setShowPicker] = useState(false);",
      "  const [selectedDate, setSelectedDate] = useState(value);",
      "  const currentDate = selectedDate || new Date();",
      "  const [currentMonth, setCurrentMonth] = useState(currentDate.getMonth());",
      "  const [currentYear, setCurrentYear] = useState(currentDate.getFullYear());",
      "",
      "  const months = [",
      "    'Enero', 'Febrero', 'Marzo', 'Abril', 'Mayo', 'Junio',",
      "    'Julio', 'Agosto', 'Septiembre', 'Octubre', 'Noviembre', 'Diciembre'",
      "  ];",
      "",
      "  const weekDays = ['Dom', 'Lun', 'Mar', 'Mié', 'Jue', 'Vie', 'Sáb'];",
      "",
      "  const formatDate = (date) => {",
      "    if (!date) return placeholder;",
      "    ",
      "    const day = date.getDate().toString().padStart(2, '0');",
      "    const month = (date.getMonth() + 1).toString().padStart(2, '0');",
      "    const year = date.getFullYear();",
      "",
      "    switch (dateFormat) {",
      "      case 'DD/MM/YYYY':",
      "        return `\\${day}/\\${month}/\\${year}`;",
      "      case 'MM/DD/YYYY':",
      "        return `\\${month}/\\${day}/\\${year}`;",
      "      case 'YYYY-MM-DD':",
      "        return `\\${year}-\\${month}-\\${day}`;",
      "      default:",
      "        return date.toLocaleDateString('es-ES');",
      "    }",
      "  };",
      "",
      "  const getDaysInMonth = (month, year) => {",
      "    return new Date(year, month + 1, 0).getDate();",
      "  };",
      "",
      "  const getFirstDayOfMonth = (month, year) => {",
      "    return new Date(year, month, 1).getDay();",
      "  };",
      "",
      "  const isDateDisabled = (date) => {",
      "    if (minimumDate && date < minimumDate) return true;",
      "    if (maximumDate && date > maximumDate) return true;",
      "    return false;",
      "  };",
      "",
      "  const renderCalendar = () => {",
      "    const daysInMonth = getDaysInMonth(currentMonth, currentYear);",
      "    const firstDay = getFirstDayOfMonth(currentMonth, currentYear);",
      "    const days = [];",
      "",
      "    // Días vacíos al inicio",
      "    for (let i = 0; i < firstDay; i++) {",
      "      days.push(",
      "        <View key={`empty-\\${i}`} style={styles.dayContainer}>",
      "          <View style={styles.emptyDay} />",
      "        </View>",
      "      );",
      "    }",
      "",
      "    // Días del mes",
      "    for (let day = 1; day <= daysInMonth; day++) {",
      "      const date = new Date(currentYear, currentMonth, day);",
      "      const isSelected = selectedDate && ",
      "        date.getDate() === selectedDate.getDate() &&",
      "        date.getMonth() === selectedDate.getMonth() &&",
      "        date.getFullYear() === selectedDate.getFullYear();",
      "      const isDisabled = isDateDisabled(date);",
      "",
      "      days.push(",
      "        <View key={day} style={styles.dayContainer}>",
      "          <TouchableOpacity",
      "            style={[",
      "              styles.dayButton,",
      "              isSelected && styles.selectedDay,",
      "              isDisabled && styles.disabledDay,",
      "            ]}",
      "            onPress={() => !isDisabled && handleDateSelect(date)}",
      "            disabled={isDisabled}",
      "          >",
      "            <Text",
      "              style={[",
      "                styles.dayText,",
      "                isSelected && styles.selectedDayText,",
      "                isDisabled && styles.disabledDayText,",
      "              ]}",
      "            >",
      "              {day}",
      "            </Text>",
      "          </TouchableOpacity>",
      "        </View>",
      "      );",
      "    }",
      "",
      "    return days;",
      "  };",
      "",
      "  const handleDateSelect = (date) => {",
      "    setSelectedDate(date);",
      "    onDateChange && onDateChange(date);",
      "    setShowPicker(false);",
      "  };",
      "",
      "  const navigateMonth = (direction) => {",
      "    if (direction === 'prev') {",
      "      if (currentMonth === 0) {",
      "        setCurrentMonth(11);",
      "        setCurrentYear(currentYear - 1);",
      "      } else {",
      "        setCurrentMonth(currentMonth - 1);",
      "      }",
      "    } else {",
      "      if (currentMonth === 11) {",
      "        setCurrentMonth(0);",
      "        setCurrentYear(currentYear + 1);",
      "      } else {",
      "        setCurrentMonth(currentMonth + 1);",
      "      }",
      "    }",
      "  };",
      "",
      "  const openPicker = () => {",
      "    if (!disabled) {",
      "      // Si no hay fecha seleccionada, usar la fecha actual para mostrar el calendario",
      "      if (!selectedDate) {",
      "        const today = new Date();",
      "        setCurrentMonth(today.getMonth());",
      "        setCurrentYear(today.getFullYear());",
      "      }",
      "      setShowPicker(true);",
      "    }",
      "  };",
      "",
      "  const closePicker = () => {",
      "    setShowPicker(false);",
      "  };",
      "",
      "  return (",
      "    <View style={[styles.container, style]}>",
      "      <TouchableOpacity",
      "        style={[",
      "          styles.dateButton,",
      "          disabled && styles.disabledButton,",
      "          !selectedDate && styles.placeholderButton,",
      "        ]}",
      "        onPress={openPicker}",
      "        disabled={disabled}",
      "      >",
      "        <Text",
      "          style={[",
      "            styles.dateText,",
      "            disabled && styles.disabledText,",
      "            !selectedDate && styles.placeholderText,",
      "          ]}",
      "        >",
      "          {formatDate(selectedDate)}",
      "        </Text>",
      "      </TouchableOpacity>",
      "",
      "      <Modal",
      "        transparent={true}",
      "        animationType=\"slide\"",
      "        visible={showPicker}",
      "        onRequestClose={closePicker}",
      "      >",
      "        <View style={styles.modalContainer}>",
      "          <View style={styles.modalContent}>",
      "            <View style={styles.modalHeader}>",
      "              <TouchableOpacity onPress={closePicker} style={styles.modalButton}>",
      "                <Text style={styles.modalButtonText}>Cancelar</Text>",
      "              </TouchableOpacity>",
      "              <Text style={styles.modalTitle}>Seleccionar Fecha</Text>",
      "              <TouchableOpacity onPress={closePicker} style={styles.modalButton}>",
      "                <Text style={[styles.modalButtonText, styles.confirmButton]}>",
      "                  Confirmar",
      "                </Text>",
      "              </TouchableOpacity>",
      "            </View>",
      "",
      "            {/* Header del calendario */}",
      "            <View style={styles.calendarHeader}>",
      "              <TouchableOpacity",
      "                style={styles.navButton}",
      "                onPress={() => navigateMonth('prev')}",
      "              >",
      "                <Text style={styles.navButtonText}>‹</Text>",
      "              </TouchableOpacity>",
      "              <Text style={styles.monthYearText}>",
      "                {months[currentMonth]} {currentYear}",
      "              </Text>",
      "              <TouchableOpacity",
      "                style={styles.navButton}",
      "                onPress={() => navigateMonth('next')}",
      "              >",
      "                <Text style={styles.navButtonText}>›</Text>",
      "              </TouchableOpacity>",
      "            </View>",
      "",
      "            {/* Días de la semana */}",
      "            <View style={styles.weekDaysContainer}>",
      "              {weekDays.map((day, index) => (",
      "                <View key={index} style={styles.weekDayContainer}>",
      "                  <Text style={styles.weekDayText}>{day}</Text>",
      "                </View>",
      "              ))}",
      "            </View>",
      "",
      "            {/* Calendario */}",
      "            <View style={styles.calendarContainer}>",
      "              {renderCalendar()}",
      "            </View>",
      "          </View>",
      "        </View>",
      "      </Modal>",
      "    </View>",
      "  );",
      "};",
      "",
      "const styles = StyleSheet.create({",
      "  container: {",
      "    width: '100%',",
      "  },",
      "  dateButton: {",
      "    borderWidth: 1,",
      "    borderColor: '#ff69b4',",
      "    borderRadius: 8,",
      "    paddingHorizontal: 15,",
      "    paddingVertical: 12,",
      "    backgroundColor: '#ff69b4',",
      "    minHeight: 48,",
      "    justifyContent: 'center',",
      "    shadowColor: '#ff69b4',",
      "    shadowOffset: {",
      "      width: 0,",
      "      height: 2,",
      "    },",
      "    shadowOpacity: 0.25,",
      "    shadowRadius: 3.84,",
      "    elevation: 5,",
      "  },",
      "  disabledButton: {",
      "    backgroundColor: '#ffb3d9',",
      "    borderColor: '#ffb3d9',",
      "    opacity: 0.6,",
      "  },",
      "  placeholderButton: {",
      "    borderColor: '#ff69b4',",
      "    backgroundColor: '#ffcce5',",
      "  },",
      "  dateText: {",
      "    fontSize: 16,",
      "    color: '#fff',",
      "    fontWeight: '500',",
      "  },",
      "  disabledText: {",
      "    color: '#fff',",
      "    opacity: 0.8,",
      "  },",
      "  placeholderText: {",
      "    color: '#cc0066',",
      "    fontStyle: 'italic',",
      "    fontWeight: '400',",
      "  },",
      "  modalContainer: {",
      "    flex: 1,",
      "    justifyContent: 'center',",
      "    alignItems: 'center',",
      "    backgroundColor: 'rgba(255, 105, 180, 0.3)',",
      "  },",
      "  modalContent: {",
      "    backgroundColor: '#ff69b4',",
      "    borderRadius: 20,",
      "    width: width * 0.9,",
      "    maxWidth: 350,",
      "    overflow: 'hidden',",
      "  },",
      "  modalHeader: {",
      "    display: 'none',",
      "  },",
      "  modalTitle: {",
      "    display: 'none',",
      "  },",
      "  modalButton: {",
      "    display: 'none',",
      "  },",
      "  modalButtonText: {",
      "    display: 'none',",
      "  },",
      "  confirmButton: {",
      "    display: 'none',",
      "  },",
      "  calendarHeader: {",
      "    flexDirection: 'row',",
      "    justifyContent: 'space-between',",
      "    alignItems: 'center',",
      "    paddingHorizontal: 20,",
      "    paddingVertical: 20,",
      "    backgroundColor: '#ff69b4',",
      "    borderTopLeftRadius: 20,",
      "    borderTopRightRadius: 20,",
      "  },",
      "  navButton: {",
      "    padding: 10,",
      "    borderRadius: 20,",
      "    backgroundColor: 'rgba(255, 255, 255, 0.3)',",
      "    borderWidth: 1,",
      "    borderColor: 'rgba(255, 255, 255, 0.5)',",
      "  },",
      "  navButtonText: {",
      "    fontSize: 20,",
      "    color: '#fff',",
      "    fontWeight: 'bold',",
      "  },",
      "  monthYearText: {",
      "    fontSize: 18,",
      "    fontWeight: '600',",
      "    color: '#fff',",
      "  },",
      "  weekDaysContainer: {",
      "    flexDirection: 'row',",
      "    backgroundColor: '#ffcce5',",
      "    paddingVertical: 10,",
      "  },",
      "  weekDayContainer: {",
      "    flex: 1,",
      "    alignItems: 'center',",
      "  },",
      "  weekDayText: {",
      "    fontSize: 14,",
      "    fontWeight: '600',",
      "    color: '#cc0066',",
      "  },",
      "  calendarContainer: {",
      "    flexDirection: 'row',",
      "    flexWrap: 'wrap',",
      "    backgroundColor: '#ff69b4',",
      "    paddingHorizontal: 10,",
      "    paddingBottom: 20,",
      "  },",
      "  dayContainer: {",
      "    width: `\\${100/7}%`,",
      "    aspectRatio: 1,",
      "    padding: 2,",
      "  },",
      "  dayButton: {",
      "    flex: 1,",
      "    justifyContent: 'center',",
      "    alignItems: 'center',",
      "    borderRadius: 20,",
      "    backgroundColor: 'transparent',",
      "  },",
      "  selectedDay: {",
      "    backgroundColor: '#fff',",
      "    shadowColor: '#ff69b4',",
      "    shadowOffset: {",
      "      width: 0,",
      "      height: 2,",
      "    },",
      "    shadowOpacity: 0.25,",
      "    shadowRadius: 3.84,",
      "    elevation: 5,",
      "  },",
      "  disabledDay: {",
      "    opacity: 0.3,",
      "  },",
      "  emptyDay: {",
      "    flex: 1,",
      "  },",
      "  dayText: {",
      "    fontSize: 16,",
      "    color: '#fff',",
      "    fontWeight: '500',",
      "  },",
      "  selectedDayText: {",
      "    color: '#ff69b4',",
      "    fontWeight: '700',",
      "  },",
      "  disabledDayText: {",
      "    color: 'rgba(255, 255, 255, 0.5)',",
      "  },",
      "});",
      "",
      "// Ejemplo de uso del componente",
      "export default function App() {",
      "  const [selectedDate, setSelectedDate] = useState(new Date());",
      "  const [selectedDate2, setSelectedDate2] = useState(null);",
      "",
      "  return (",
      "    <View style={appStyles.container}>",
      "      <Text style={appStyles.title}>Date Picker Rosa Personalizado</Text>",
      "      ",
      "      <View style={appStyles.section}>",
      "        <Text style={appStyles.label}>Fecha con valor inicial:</Text>",
      "        <CustomDatePicker",
      "          value={selectedDate}",
      "          onDateChange={setSelectedDate}",
      "          placeholder=\"Selecciona una fecha\"",
      "          dateFormat=\"DD/MM/YYYY\"",
      "          minimumDate={new Date(2020, 0, 1)}",
      "          maximumDate={new Date(2030, 11, 31)}",
      "        />",
      "        <Text style={appStyles.result}>",
      "          Fecha seleccionada: {selectedDate ? selectedDate.toLocaleDateString('es-ES') : 'Ninguna'}",
      "        </Text>",
      "      </View>",
      "",
      "      <View style={appStyles.section}>",
      "        <Text style={appStyles.label}>Fecha sin valor inicial:</Text>",
      "        <CustomDatePicker",
      "          value={selectedDate2}",
      "          onDateChange={setSelectedDate2}",
      "          placeholder=\"Toca para seleccionar fecha\"",
      "          dateFormat=\"DD/MM/YYYY\"",
      "        />",
      "        <Text style={appStyles.result}>",
      "          Fecha seleccionada: {selectedDate2 ? selectedDate2.toLocaleDateString('es-ES') : 'Ninguna'}",
      "        </Text>",
      "      </View>",
      "",
      "      <View style={appStyles.section}>",
      "        <Text style={appStyles.label}>Date Picker Deshabilitado:</Text>",
      "        <CustomDatePicker",
      "          value={new Date()}",
      "          placeholder=\"Campo deshabilitado\"",
      "          disabled={true}",
      "        />",
      "      </View>",
      "    </View>",
      "  );",
      "}",
      "",
      "const appStyles = StyleSheet.create({",
      "  container: {",
      "    flex: 1,",
      "    padding: 20,",
      "    backgroundColor: '#ffe6f2',",
      "  },",
      "  title: {",
      "    fontSize: 24,",
      "    fontWeight: 'bold',",
      "    textAlign: 'center',",
      "    marginBottom: 30,",
      "    color: '#cc0066',",
      "  },",
      "  section: {",
      "    marginBottom: 25,",
      "  },",
      "  label: {",
      "    fontSize: 16,",
      "    fontWeight: '600',",
      "    marginBottom: 8,",
      "    color: '#cc0066',",
      "  },",
      "  result: {",
      "    marginTop: 8,",
      "    fontSize: 14,",
      "    color: '#666',",
      "    fontStyle: 'italic',",
      "  },",
      "});"
    ],
    "description": "igb_component_datepicker snippet"
  }
}